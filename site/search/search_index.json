{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a GuimoNotion","text":"\u00daltimas modificaciones <ul> <li>16/12/2024 - A\u00f1adir servicios a la gu\u00eda de <code>Angular</code></li> <li>16/12/2024 - A\u00f1adir como editar el men\u00fa contextual a la gu\u00eda de <code>Angular</code></li> <li>15/12/2024 - Mejorar la gu\u00eda de <code>Electron</code> para <code>Angular</code></li> <li>24/11/2024 - Continuar gu\u00eda de <code>React</code></li> <li>24/11/2024 - Continuar gu\u00eda de <code>React</code></li> <li>11/11/2024 - A\u00f1adir gu\u00eda de <code>Docker</code></li> <li>19/10/2024 - A\u00f1adir gu\u00eda de <code>React</code></li> <li>09/10/2024 - Completar la gu\u00eda de <code>rutas</code> en <code>Angular</code></li> <li>07/10/2024 - A\u00f1adir <code>estructura de proyecto</code> a la gu\u00eda de <code>Angular</code></li> <li>23/09/2024 - A\u00f1adir gu\u00eda de <code>Java</code></li> <li>23/09/2024 - Ajuste en los tags de la gu\u00eda de <code>Python</code></li> <li>16/09/2024 - Organizar <code>Laravel</code> en subcarpetas</li> </ul>"},{"location":"#lenguajes-de-programacion","title":"Lenguajes de programaci\u00f3n","text":"Lenguaje Interpretado Usos m\u00e1s comunes Implementado \u00daltima modificaci\u00f3n Bash Script S\u00ed Automatizaci\u00f3n de tareas, administraci\u00f3n de sistemas, scripts de shell X 02/09/2024 Java No Aplicaciones empresariales, desarrollo de Android, sistemas distribuidos X 23/09/2024 Kotlin No Desarrollo de aplicaciones Android, desarrollo web, aplicaciones de servidor X 02/09/2024 Python S\u00ed Ciencia de datos, desarrollo web, automatizaci\u00f3n de scripts X 02/09/2024 PHP S\u00ed Desarrollo web, gesti\u00f3n de contenido (CMS), scripts del lado del servidor C++ No Desarrollo de software de alto rendimiento, videojuegos, sistemas embebidos X 24/11/2024"},{"location":"#frameworks","title":"Frameworks","text":""},{"location":"#frontend","title":"FrontEnd","text":"Framework/Plataforma Lenguaje Base Usos m\u00e1s comunes Implementado \u00daltima modificaci\u00f3n Android con Kotlin Kotlin Desarrollo de aplicaciones m\u00f3viles nativas para Android Angular TypeScript Desarrollo de aplicaciones web din\u00e1micas y complejas X 16/12/2024 React JavaScript Desarrollo de interfaces de usuario para aplicaciones web de una sola p\u00e1gina (SPA) X 24/10/2024 Electron TypeScript Desarrollo de aplicaciones de escritorio multiplataforma utilizando tecnolog\u00edas web X 02/12/2024 Ionic TypeScript Desarrollo de aplicaciones m\u00f3viles h\u00edbridas utilizando tecnolog\u00edas web WPF C# Desarrollo de aplicaciones de escritorio para Windows con interfaces ricas MkDocs Python Generaci\u00f3n de sitios web de documentaci\u00f3n est\u00e1tica a partir de Markdown X 02/09/2024"},{"location":"#backend","title":"BackEnd","text":"Framework Lenguaje Base Usos m\u00e1s comunes Implementado \u00daltima modificaci\u00f3n ASP.NET Core C# Desarrollo de aplicaciones web y servicios API, aplicaciones empresariales Express.js JavaScript Desarrollo del lado del servidor, API REST, aplicaciones de back-end ligeras FastAPI Python Desarrollo de API REST, aplicaciones de back-end de alto rendimiento PHP Laravel PHP Desarrollo web de back-end, aplicaciones CRUD, API REST X 16/09/2024 Spring Boot Java Desarrollo de aplicaciones empresariales, microservicios"},{"location":"#otros","title":"Otros","text":"Nombre Usos m\u00e1s comunes Caracter\u00edsticas clave Implementado \u00daltima modificaci\u00f3n CSS Dise\u00f1o y presentaci\u00f3n de documentos web Controla el estilo visual de elementos HTML, incluye propiedades para colores, fuentes, m\u00e1rgenes, etc. HTML Estructuraci\u00f3n y presentaci\u00f3n de contenido en la web Etiquetas para definir elementos como encabezados, p\u00e1rrafos, enlaces, etc. JSON Intercambio de datos entre aplicaciones, configuraci\u00f3n, almacenamiento de datos Formato ligero y legible por humanos, basado en texto, usa una sintaxis de pares clave-valor X 26/08/2024 Markdown Documentaci\u00f3n, blogs, README files Sintaxis ligera para formatear texto plano, conversi\u00f3n a HTML X 24/08/2024 Node.js Desarrollo de aplicaciones web, servidores, herramientas de desarrollo Entorno de ejecuci\u00f3n para JavaScript en el lado del servidor, permite el uso de JavaScript fuera del navegador X 24/08/2024 XML Intercambio de datos entre aplicaciones, configuraci\u00f3n Estructura jer\u00e1rquica con etiquetas personalizables, extensibilidad X 26/08/2024 YAML Configuraci\u00f3n de aplicaciones, intercambio de datos Formato legible por humanos, jerarqu\u00eda basada en indentaci\u00f3n X 26/08/2024 Docker Virtualizaci\u00f3n de contenedores para aplicaciones, despliegue y pruebas Plataforma de contenedores ligera, portabilidad entre entornos, integraci\u00f3n con CI/CD y manejo de versiones X 11/11/2024"},{"location":"frameworks/backend/php-laravel/","title":"PHP-Laravel","text":"","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/#instalacion-de-laravel-y-creacion-de-un-nuevo-proyecto","title":"Instalaci\u00f3n de Laravel y creaci\u00f3n de un nuevo proyecto","text":"","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/#instalar-laravel","title":"Instalar Laravel","text":"<p>Ejecuta el siguiente comando para instalar Laravel de manera global con Composer:</p> <pre><code>composer global require laravel/installer\n</code></pre> <p>Si ya tienes instalado el instalador y quieres asegurarte de estar usando la \u00faltima versi\u00f3n, ejecuta:</p> <pre><code>composer global update laravel/installer\n</code></pre> <p>Puedes comprobar que Laravel se haya instalado correctamente verificando su versi\u00f3n:</p> <pre><code>laravel -v\n</code></pre>","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/#crear-el-proyecto","title":"Crear el proyecto","text":"<pre><code>composer create-project laravel/laravel APi_12\n</code></pre>","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/#intalar-breeze","title":"Intalar Breeze","text":"<pre><code>composer require laravel/breeze --dev\n</code></pre> <p>Elegir la opcion <code>0</code> o <code>blade</code></p> <pre><code>php artisan breeze:install\n</code></pre> <pre><code>php artisan migrate\n</code></pre> <pre><code>npm install\n</code></pre> <pre><code>npm run dev\n</code></pre>","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/#configuracion","title":"Configuraci\u00f3n","text":"<p>Hay que modificar el archivo <code>.env</code> (Se encuentra en el directorio raiz):</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=nombreBD*\nDB_USERNAME=*\nDB_PASSWORD=*\n</code></pre>","tags":["In development","Pending review","16/09/2024"]},{"location":"frameworks/backend/php-laravel/collections/","title":"Collections","text":"<p>Las collections nos permiten transformar colecciones en respuestas JSON estructuradas.</p> <p>Para crear una colection usaremos el comando:</p> <pre><code>php artisan make:resource ArticuloCollection\n</code></pre>"},{"location":"frameworks/backend/php-laravel/controllersAPI/","title":"Controladores","text":"<p>Para crear un controlador usaremos el comando:</p> <pre><code>php artisan make:controller NombreApiController --api\n</code></pre> <p>Nos crear\u00e1 los m\u00e9todos index, store, show, update y destroy vacios por defecto.</p>"},{"location":"frameworks/backend/php-laravel/controllersAPI/#validacion-de-campos-en-el-controlador","title":"Validaci\u00f3n de campos en el controlador","text":"<p>Para validar campos en el controlador implementamos el siguiente c\u00f3digo dentro de nuestra funci\u00f3n:</p> <pre><code>$validator = Validator::make($request-&gt;all(), [\n  \"id\" =&gt; \"required|exists:processes,id\",\n  \"code\" =&gt; \"required|string|max:250\",\n  \"description\" =&gt; \"nullable\",\n  \"date\" =&gt; \"required\",\n  \"gender\" =&gt; \"in:Male,Female\"\n]);\n\nif ($validator-&gt;fails()) {\n  return response()-&gt;json($validator-&gt;errors(), 400);\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/controllersAPI/#ejemplos","title":"Ejemplos","text":""},{"location":"frameworks/backend/php-laravel/controllersAPI/#index","title":"Index","text":"<pre><code>public function index()\n{\n    $users = User::all();\n    return $users;\n}\n</code></pre> <p>En <code>Laravel</code> viene implementada una funci\u00f3n de paginaci\u00f3n por defecto:</p> <pre><code>public function index()\n{\n    $users = User::paginate($nResults);\n    return $users;\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/controllersAPI/#show","title":"Show","text":"<pre><code>public function show($id)\n{\n    $user = User::findOrFail($id);\n    return $user;\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/controllersAPI/#store","title":"Store","text":"<pre><code>public function store(Request $request)\n{\n    $user = User::create($request);\n    return $user;\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/controllersAPI/#update","title":"Update","text":"<pre><code>public function update(Request $request, $id)\n{\n    $user = User::findOrFail($id);\n    $user-&gt;update([\n        'dni' =&gt; $request-&gt;input('dni')\n       ]);\n    return $user;\n}\n</code></pre> <p>El id solo si es necesario comprobarlo si ese objeto existe en la base de datos para una actualizaci\u00f3n.</p>"},{"location":"frameworks/backend/php-laravel/factories/","title":"Factories","text":"<p>Los factories son clases que crean por nosotros datos ficticios autom\u00e1ticamente.</p> <p>Para crear un factorie usaremos el comando:</p> <pre><code>php artisan make:factorie NombreFactorie\n</code></pre> <p>Se recomienda crear un factorie para cada clase.</p> <p>En este factorie debemos completar el atributo <code>model</code> y la funci\u00f3n <code>definition()</code>.</p> <pre><code>class NombreFactory extendes Factory {\n  protected $model = Nombre::class;\n\n  public function definition() {\n    return [\n      'atributo' =&gt; fake()-&gt;name(),\n      'atributo' =&gt; fake()-&gt;name(),\n      'foreign_key' =&gt; ModeloForeignKey::all()-&gt;random()-&gt;id,\n    ];\n  }\n}\n</code></pre> <p>Desde la funci\u00f3n <code>run</code> de la clase Seeder podemos llamar al factorie de la siguiente forma:</p> <pre><code>\\App\\Models\\Nombre::factory(n\u00famero)-&gt;create();\n</code></pre>"},{"location":"frameworks/backend/php-laravel/migrations/","title":"Migraciones","text":""},{"location":"frameworks/backend/php-laravel/migrations/#crear-migracion","title":"Crear migraci\u00f3n","text":"<p>(Se deben crear en el orden en que se desea que se ejecuten)</p> <pre><code>php artisan make:migration create_nombre_table\n</code></pre>"},{"location":"frameworks/backend/php-laravel/migrations/#configurar-las-migraciones","title":"Configurar las migraciones","text":"<pre><code>Schema::create('users', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('name');\n    $table-&gt;date('birth_date')-&gt;nullable();\n    $table-&gt;enum('gender', ['Male', 'Female']);\n    $table-&gt;foreign('address_id')-&gt;references('id')-&gt;on('addresses')-&gt;onDelete('cascade');\n    $table-&gt;timestamps();\n});\n\npublic function down(): void {\n    Schema::dropIfExists('breedings');\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/migrations/#migrar","title":"Migrar","text":"<p>(Se migra por orden alfab\u00e9tico)</p> <pre><code>php artisan migrate\n</code></pre> <p>Orden de las migraciones</p> <p>Se migra por orden alfab\u00e9tico o por fecha de creaci\u00f3n si no se han modificado los nombres de los archivos.</p> <p>Deshacer la \u00faltima migraci\u00f3n</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>Deshacer todas las migraciones</p> <pre><code>php artisan migrate:reset\n</code></pre> <p>Deshacer todas las migraciones y migrar de nuevo</p> <pre><code>php artisan migrate:fresh\n</code></pre> <p>Estado de las migraciones</p> <pre><code>php artisan migrate:status\n</code></pre>"},{"location":"frameworks/backend/php-laravel/model/","title":"Modelo","text":""},{"location":"frameworks/backend/php-laravel/model/#crear-nuevo-modelo","title":"Crear nuevo modelo","text":"<pre><code>php artisan make:model Nombre\n</code></pre> <p>La tabla es el plural del nombre del modelo creado, pero a veces no lo detecta bien asi que le cambiamos manualmente el nombre para que pueda encontrar la tabla.</p> <pre><code>protected $table = 'tasks_lists';\n</code></pre> <p>Con la primary key pasa algo parecido. Laravel asume que cada tabla tiene declarado un campo llamado <code>id</code>, pero en caso de que no sea as\u00ed debemos sobreescribirlo.</p> <pre><code>protected $primaryKey = 'id';\n</code></pre> <p>La propiedad <code>timestamps</code> nos permite crear los campos <code>updated_at</code> y <code>created_at</code> en la base de datos de forma autom\u00e1tica en la base de datos. Estos campos se actualizan automaticamente al ejercer acciones de actualizado o creaci\u00f3n de la fila.</p> <pre><code>public $timestamps = false;\n</code></pre>"},{"location":"frameworks/backend/php-laravel/model/#atributos","title":"Atributos","text":"<pre><code>protected $fileable = [\n   'id',\n   'name'\n];\n</code></pre> <p>Importante</p> <p>Se deben especificar tambi\u00e9n las foreign keys</p>"},{"location":"frameworks/backend/php-laravel/model/#relaciones","title":"Relaciones","text":""},{"location":"frameworks/backend/php-laravel/model/#one-to-one","title":"One to One","text":"<p>Se debe crear una funcion <code>hasOne()</code> en uno de los modelos.</p> <pre><code>class Libro extends Model {\n  public function portada() {\n    return $this-&gt;hasOne(Portada::class);\n  }\n}\n</code></pre> <p>Si se desea hacer la relaci\u00f3n bidireccional debe agregarse al otro modelo el metodo <code>belongsTo()</code></p> <pre><code>class Libro extends Model {\n  public function portada() {\n    return $this-&gt;hasOne(Portada::class);\n  }\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/model/#one-to-many","title":"One to Many","text":"<p>Se debe crear la funci\u00f3n <code>hasMany()</code> en el modelo que posee varios objetos.</p> <pre><code>class Autor extends Model\n{\n  public function libros(){\n    return $this-&gt;hasMany(Libro::class);\n  }\n}\n</code></pre> <p>La relaci\u00f3n inversa se establece creando la funci\u00f3n <code>belongsTo()</code> en el otro modelo.</p> <pre><code>class Libro extends Model {\n  public function autor() {\n    return $this-&gt;belongsTo(Autor::class);\n  }\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/model/#many-to-many","title":"Many to Many","text":"<p>En los dos modelos debe definirse el metodo <code>belongToMany()</code></p> <pre><code>class Libro extends Model {\n  public function bibliotecas() {\n    return $this-&gt;belongsToMany(Biblioteca::class);\n  }\n}\n</code></pre> <pre><code>class Biblioteca extends Model {\n  public function libros() {\n    return $this-&gt;belongsToMany(Libro::class);\n  }\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/resources/","title":"Resources","text":"<p>Los <code>resources</code> son herramientas para dar forma a las respuestas JSON de la API, de tal manera que nos permiten personalizar la presentaci\u00f3n de los datos.</p> <p>Para crear un <code>resource</code> usaremos el comando:</p> <pre><code>php artisan make:resource NombreResource\n</code></pre> <p>Puedes personalizar qu\u00e9 campos incluir, renombrarlos y agregar informaci\u00f3n adicional.</p> <pre><code>public function toArray($request)\n{\n    return [\n        'id' =&gt; $this-&gt;id,\n        'titulo' =&gt; $this-&gt;titulo,\n        'contenido' =&gt; $this-&gt;contenido,\n        'fecha' =&gt; $this-&gt;created_at-&gt;format('Y-m-d'),\n        'clave_foranea' =&gt; $this-&gt;nombre_tabla,\n        'clave_foranea' =&gt; $this-&gt;nombre_tabla-&gt;campo_tabla\n    ];\n}\n</code></pre>"},{"location":"frameworks/backend/php-laravel/seeders/","title":"Seeders","text":""},{"location":"frameworks/backend/php-laravel/seeders/#seeders","title":"Seeders","text":"<p>Los seeders sirven para rellenar la base de datos con informaci\u00f3n inicial.</p> <p>Para crear un seeder usaremos el comando:</p> <pre><code>php artisan make:seeder NombreSeeder\n</code></pre> <p>Se recomienda crear un seeder para cada tabla. En este seeder se crear\u00e1 un m\u00e9todo <code>run</code> donde escribiremos los datos que queremos introducir en la base de datos.</p> <p>Desde la funci\u00f3n <code>run</code> de la clase <code>DatabaseSeeder</code> llamaremos a los distintos seeders</p> <pre><code>$this-&gt;call(NombreSeeder::class);\n</code></pre> <pre><code>User::factory()-&gt;create([\n    'name' =&gt; 'Nombre',\n    'email' =&gt; 'test@example.com',\n    'password' =&gt; 'test',\n    'color_id' =&gt; Color::where('name', 'LIKE', 'NARANJA')\n]);\n</code></pre> <p>Para ejecutar la clase <code>DatabaseSeeder</code> usaremos el comando:</p> <pre><code>php artisan db:seed\n</code></pre>"},{"location":"frameworks/backend/spring-boot/","title":"Index","text":"SPRING BOOT"},{"location":"frameworks/frontend/angular/","title":"Introducci\u00f3n","text":"<p>Angular es un framework de desarrollo web de c\u00f3digo abierto mantenido por Google. Est\u00e1 dise\u00f1ado para facilitar la creaci\u00f3n de aplicaciones web de una sola p\u00e1gina (SPA) al proporcionar una estructura robusta para el desarrollo frontend. Angular utiliza TypeScript como lenguaje principal, aunque tambi\u00e9n puedes escribir c\u00f3digo en JavaScript.</p>","tags":["In development","Pending review","09/10/2024"]},{"location":"frameworks/frontend/angular/#que-es-angular","title":"\u00bfQu\u00e9 es Angular?","text":"<p>Angular es un framework MVC (Modelo-Vista-Controlador) que permite a los desarrolladores construir aplicaciones din\u00e1micas y de alta calidad con una estructura organizada y eficiente. Utiliza una arquitectura basada en componentes y proporciona herramientas para el manejo de datos, enrutamiento y pruebas, entre otras funcionalidades.</p>","tags":["In development","Pending review","09/10/2024"]},{"location":"frameworks/frontend/angular/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ol> <li> <p>Componentes: Angular organiza la aplicaci\u00f3n en componentes reutilizables que encapsulan la l\u00f3gica, la vista y el    estilo. Cada componente es una pieza independiente de la interfaz de usuario.</p> </li> <li> <p>Data Binding: Angular proporciona dos tipos principales de data binding: bidireccional y unidireccional. El data    binding bidireccional mantiene sincronizados el modelo y la vista, mientras que el unidireccional fluye desde el    modelo hacia la vista.</p> </li> <li> <p>Inyecci\u00f3n de Dependencias: Angular utiliza un sistema de inyecci\u00f3n de dependencias para gestionar la creaci\u00f3n y    el suministro de servicios y otros objetos a los componentes.</p> </li> <li> <p>Enrutamiento: Angular tiene un sistema de enrutamiento integrado que permite la navegaci\u00f3n entre diferentes    vistas y componentes sin recargar la p\u00e1gina.</p> </li> <li> <p>Directivas: Las directivas son atributos o elementos personalizados que permiten a los desarrolladores extender    el HTML y modificar el comportamiento de los elementos del DOM.</p> </li> <li> <p>Servicios: Los servicios son objetos que se utilizan para compartir datos y funcionalidades entre diferentes    componentes.</p> </li> </ol>","tags":["In development","Pending review","09/10/2024"]},{"location":"frameworks/frontend/angular/additional_resources/","title":"Recursos adicionales","text":"<ul> <li>P\u00e1gina oficial de Angular</li> <li>Documentaci\u00f3n oficial de Angular</li> <li>GitHub de Angular</li> </ul>"},{"location":"frameworks/frontend/angular/additional_resources/context-menu/","title":"Editar el men\u00fa contextual","text":"<p>Para cambiar el men\u00fa que aparece al hacer click derecho en tu p\u00e1gina web hecha con Angular, puedes sobreescribir el comportamiento predeterminado del evento contextmenu y mostrar un men\u00fa personalizado</p>"},{"location":"frameworks/frontend/angular/additional_resources/context-menu/#interceptar-el-evento-contextmenu","title":"Interceptar el evento <code>contextmenu</code>","text":"<p>En el componente donde desees modificar el men\u00fa:</p> <pre><code>import {Component, HostListener} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrl: './app.component.css'\n})\nexport class AppComponent {\n    showContextMenu = false;\n    contextMenuPosition = {x: '0px', y: '0px'};\n\n    @HostListener('document:click')\n    onDocumentClick(): void {\n        this.showContextMenu = false; //Oculta el men\u00fa al hacer click fuera\n    }\n\n    onRightClick(event: MouseEvent): void {\n        event.preventDefault(); // Evita que aparezca el men\u00fa por defecto\n        this.showContextMenu = true;\n        this.contextMenuPosition = {\n            x: `${event.clientX}px`,\n            y: `${event.clientY}px`\n        }\n    }\n\n    hendleOption(option: string): void {\n        console.log(`Opci\u00f3n seleccionada ${option}`);\n        this.showContextMenu = false;\n    }\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/additional_resources/context-menu/#modificar-el-html","title":"Modificar el HTML","text":"<pre><code>&lt;div (contextmenu)=\"onRightClick($event)\"&gt;\n    &lt;p&gt;Haz click derecho aqu\u00ed&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div *ngIF=\"showContextMenu\" [ngStyle]=\"{ top: contextMenuPosition.y, left: contextMenuPosition.x }\"\n     class=\"context-menu\"&gt;\n    &lt;ul&gt;\n        &lt;li click=\"handleOption('option1')\"&gt;Opci\u00f3n 1&lt;/li&gt;\n        &lt;li click=\"handleOption('option2')\"&gt;Opci\u00f3n 2&lt;/li&gt;\n        &lt;li click=\"handleOption('option3')\"&gt;Opci\u00f3n 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"frameworks/frontend/angular/additional_resources/enviroments/","title":"Variables de entorno","text":""},{"location":"frameworks/frontend/angular/additional_resources/enviroments/#publicas","title":"P\u00fablicas","text":"<p>Con variables de entorno p\u00fablicas nos referimos a todas aquellas que no sean sensibles, como URLs, nombres de servicios o configuraciones.</p> <p>Para este tipo de variables usamos los <code>environments</code>:</p> <pre><code>ng generate environments\n</code></pre> <p>Este comando generar\u00e1 dos archivos: <code>environment.ts</code> para producci\u00f3n y <code>environment.development.ts</code> para desarrollo.</p> <p>Ahora debemos a\u00f1adir las variables en ambos archivos:</p> <pre><code>export const environment = {\n  apiUrl: 'http://localhost:3000',\n};\n</code></pre> <p>Se importa el archivo environment y ya se pueden usar las variables:</p> <pre><code>import { environment } from '../environments/environment';\n\nconst apiUrl = environment.apiUrl;\n</code></pre> <p>Despu\u00e9s debemos editar la configuraci\u00f3n para que se cambie autom\u00e1ticamente al construir nuestra aplicaci\u00f3n en el archivo <code>angular.json</code>:</p> <pre><code>\"configurations\": {\n            \"production\": {\n              ...\n              \"fileReplacements\": [\n                {\n                  \"replace\": \"src/environments/environment.development.ts\",\n                  \"with\": \"src/environments/environment.ts\"\n                }\n              ]\n            },\n            \"development\": {\n              ...\n              \"fileReplacements\": [\n                {\n                  \"replace\": \"src/environments/environment.ts\",\n                  \"with\": \"src/environments/environment.development.ts\"\n                }\n              ]\n            }\n          } \n</code></pre> <p>A la hora de construir nuestra aplicaci\u00f3n para producci\u00f3n es importante especificar si estamos construyendo producci\u00f3n o desarrollo:</p> <pre><code>ng build --configuration production # development\n</code></pre>"},{"location":"frameworks/frontend/angular/components/","title":"Introducci\u00f3n","text":""},{"location":"frameworks/frontend/angular/components/#componentes","title":"Componentes","text":"<p>Para generar un nuevo <code>component</code> usamos el comando:</p> <pre><code>ng generate component directorio/nombreComponente\n</code></pre>"},{"location":"frameworks/frontend/angular/components/#estructura-de-un-componente","title":"Estructura de un componente","text":"<pre><code>@Component({\n    standalone: true, /* standalone representa si se trata de un componente standalone o cl\u00e1sico en caso de no aparecer */\n    selector: 'app-component', /* selector representa la forma de llamar al componente desde el html de otro */\n    templateUrl: './component.component.html', /* templateUrl representa la url donde se ubica la template del componente */\n    styleUrl: './component.component.css', /* styleUrl representa la url donde se ubica el archivo que define los estilos del componente */\n})\nexport class Component {\n    /* Aqu\u00ed se define el comportamiento del componente */\n}\n</code></pre> <p>La template de un componente puede sustituirse directamente por html sin necesidad de un archivo html:</p> <pre><code>@Component({\n    selector: 'app-component',\n    templateUrl: '&lt;h1&gt;Hello World!&lt;/h1&gt;',\n    styleUrl: './component.component.css',\n})\nexport class Component {\n}\n</code></pre> <p>Es recomendable cambiar el nombre del selector a los componentes: <pre><code>selector: 'Component'\n</code></pre></p>"},{"location":"frameworks/frontend/angular/components/#llamar-a-un-componente-desde-otro","title":"LLamar a un componente desde otro","text":"<p>Si el proyecto es standalone debemos importar el componente que vamos a usar dentro del componente desde el que lo llamaremos:</p> <pre><code>import {Component} from './todo-list-item.component.ts';\n\n@Component({\n    standalone: true,\n    imports: [Component],\n    template: `\n    &lt;ul&gt;\n      &lt;app-component&gt;&lt;/app-component&gt;\n    &lt;/ul&gt;\n  `,\n})\nexport class MainComponent {\n}\n</code></pre> <p>Si el proyecto es cl\u00e1sico debemos importar el componente en <code>app-module.ts</code></p> <pre><code>import {Component} from './todo-list-item.component.ts';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        Component\n        /* Debe declararse para poder ser usado en el proyecto y sus componentes */\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/databinding/","title":"Databinding","text":"<pre><code>title = 'this is the title';\n</code></pre> <pre><code>&lt;h1&gt; {{ title }} &lt;/h1&gt;\n</code></pre> <p>Si queremos usar una variable dentro de una etiqueta html para alterar el estilo:</p> <pre><code>color = 'red';\n</code></pre> <pre><code>&lt;p [style.color]=\"color\"&gt;&lt;/p&gt;\n</code></pre> <p>Si queremos mostrar un dato en el html y que a su vez si en el html se modifica se actualice nuestra variable en el typescript , se utiliza <code>two-way-databiding</code>:</p> <pre><code>name = 'William Shakespeare'\n</code></pre> <pre><code>&lt;input type=\"text\" [(ngModel)]=\"name\"&gt;\n</code></pre> <p>Warning</p> <p>Para usar <code>ngModel</code> debemos importar <code>FormsModule</code> y a\u00f1adirlo a las importaciones del <code>app-module.ts</code></p>"},{"location":"frameworks/frontend/angular/components/databinding/#bucles-y-condicionales-dentro-del-html","title":"Bucles y condicionales dentro del html","text":"<p>Existen dos formas de hacer bucles y condicionales en el html que explicaremos mediante ejemplos:</p>"},{"location":"frameworks/frontend/angular/components/databinding/#ngif-y-ngfor","title":"ngIf y ngFor","text":"<pre><code>nameList = [{name: 'name1', surname: 'surname1'}, {name: 'name2', surname: 'surname2'}];\n</code></pre> <pre><code>&lt;ng-container *ngIf=\"nameList.length &gt; 0\"&gt;\n    &lt;ng-container *ngFor=\"let item of nameList; index as i\"&gt;\n        &lt;p&gt; {{ i }} - {{ item.name }}&lt;/p&gt;\n    &lt;/ng-container&gt;\n&lt;/ng-container&gt;\n</code></pre> <ul> <li>ngIf solo muestra el contenido si la longitud de la lista es mayor que 0</li> <li>ngFor: por cada elemento de la lista muestra una etiqueta <p> con el <code>name</code> del objeto sobre el que est\u00e1 iterando.  <li>La variable <code>index</code> del ngFor representa el n\u00famero de iteraciones, aunque no es obligatorio usarla es recomendable en muchas ocasiones.</li>"},{"location":"frameworks/frontend/angular/components/databinding/#if-y-for","title":"@if y @for","text":"<pre><code>@if (nameList.length &lt; 100) {      \n    @for (item of nameList; track item; \n            let i = $index, first = $first, last = $last, \n            odd = $odd, even = $even, count = $count) {\n        &lt;p&gt; {{ i }} - {{ item.name }} - {{ first }} - {{ last }} - {{ odd }} - {{ even }} - {{ count }} &lt;/p&gt;\n    }  \n    @empty {\n        &lt;li&gt;No hay items en la lista&lt;/li&gt;\n    }\n} @else {      \n    &lt;p&gt;Aqu\u00ed hay demasiada gente&lt;/p&gt;    \n}\n</code></pre> <ul> <li><code>@if</code>: solo muestra los datos si la lista tiene menos de 100 elementos</li> <li><code>@for</code>: muestra un parrafo por cada elemento de la lista sobre la que se itera</li> <li><code>$index</code>: representa el n\u00famero de iteraci\u00f3n en el que se encuentra el elemento</li> <li><code>$first</code>: represente si es el primer elemento de la lista</li> <li><code>$last</code>: representa si es el \u00faltimo elemento de la lista</li> <li><code>$odd</code>: representa si la iteracion es impar con respecto al <code>$index</code></li> <li><code>$even</code>: representa si la iteracion es par con respecto al <code>$index</code></li> <li><code>$count</code>: representa el n\u00famero de iteraciones totales</li> <li><code>@empty</code>: muestra los datos si la coleccio\u00f3n sobre la que se est\u00e1 iterando est\u00e1 vac\u00eda</li> <li><code>@else</code>: muestra los datos si no se cumple la condici\u00f3n del <code>@if</code></li> </ul>"},{"location":"frameworks/frontend/angular/components/input_output/","title":"Input y Output","text":""},{"location":"frameworks/frontend/angular/components/input_output/#input","title":"Input","text":"<p>Para enviar un valor desde el componente padre al componente hijo se usa <code>@Input</code>:</p> <pre><code>@Component({...})\nexport class CustomSlider {\n    @Input() value = 0;\n}\n</code></pre> <pre><code>&lt;custom-slider [value]=\"50\"/&gt;\n</code></pre>"},{"location":"frameworks/frontend/angular/components/input_output/#personalizar-inputs","title":"Personalizar inputs","text":""},{"location":"frameworks/frontend/angular/components/input_output/#inputs-requeridos","title":"Inputs requeridos","text":"<pre><code>@Component({...})\nexport class CustomSlider {\n    @Input({required: true}) value = 0;\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/input_output/#tranformar-inputs","title":"Tranformar inputs","text":"<pre><code>@Component({\n    selector: 'custom-slider',\n    ...\n})\nexport class CustomSlider {\n    @Input({transform: trimString}) label = '';\n}\n\nfunction trimString(value: string | undefined) {\n    return value?.trim() ?? '';\n}\n</code></pre> <p>Angular tambi\u00e9n puede transformar valores cambiando su tipo, en este ejemplo transformar\u00eda \"false\" a false y \"2\" a 2 o devolveria NaN en caso de fallar la conversi\u00f3n.</p> <pre><code>import {Component, Input, booleanAttribute, numberAttribute} from '@angular/core';\n\n@Component({...})\nexport class CustomSlider {\n    @Input({transform: booleanAttribute}) disabled = false;\n    @Input({transform: numberAttribute}) number = 0;\n}\n</code></pre> <p>Para comprobar el tipo de variable:</p> <pre><code>@Component({...})\nexport class CustomSlider {\n    @Input({transform: appendPx}) widthPx: string = '';\n}\n\nfunction appendPx(value: number) {\n    return `${value}px`;\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/input_output/#inputs-con-getters-y-setters","title":"Inputs con getters y setters","text":"<pre><code>export class CustomSlider {\n  @Input()\n  get value(): number {\n    return this.internalValue;\n  }\n  set value(newValue: number) {\n    this.internalValue = newValue;\n  }\n  private internalValue = 0;\n}\n</code></pre> <p>Tambi\u00e9n se puede declarar un input de solo escritura:</p> <pre><code>export class CustomSlider {\n  @Input()\n  set value(newValue: number) {\n    this.internalValue = newValue;\n  }\n  private internalValue = 0;\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/input_output/#output","title":"Output","text":"<p>Para enviar datos desde un componente hijo a un componente padre se utiliza <code>@Output</code>:</p> <pre><code>@Component({...})\nexport class ExpandablePanel {\n  @Output() panelClosed = new EventEmitter&lt;void&gt;();\n}\n</code></pre> <pre><code>&lt;expandable-panel (panelClosed)=\"savePanelState()\" /&gt;\n</code></pre> <pre><code>this.panelClosed.emit();\n</code></pre> <p>Puedes enviar datos llamando a <code>emit</code>:</p> <pre><code>// You can emit primitive values.\nthis.valueChanged.emit(7);\n// You can emit custom event objects\nthis.thumbDropped.emit({\n  pointerX: 123,\n  pointerY: 456,\n})\n</code></pre> <p>Al definir un detector de eventos en una plantilla, puede acceder a los datos del evento desde la variable $event:</p> <pre><code>&lt;custom-slider (valueChanged)=\"logValue($event)\" /&gt;\n</code></pre>"},{"location":"frameworks/frontend/angular/components/input_output/#personalizando-los-nombre-de-los-outputs","title":"Personalizando los nombre de los Outputs","text":"<pre><code>@Component({...})\nexport class CustomSlider {\n  @Output('valueChanged') changed = new EventEmitter&lt;number&gt;();\n}\n</code></pre> <pre><code>&lt;custom-slider (valueChanged)=\"saveVolume()\" /&gt;\n</code></pre>"},{"location":"frameworks/frontend/angular/components/life_cicle/","title":"Ciclos de vida de un componente","text":"Creaci\u00f3nCambioRenderizadoDestrucci\u00f3n M\u00e9todo Resumen <code>constructor</code> Se ejecuta cuando Angular instancia el componente. Aqu\u00ed se deben inicializar propiedades, pero no es recomendable realizar operaciones complejas que dependan del DOM o de datos. M\u00e9todo Resumen <code>ngOnInit</code> Se ejecuta una vez despu\u00e9s de que Angular ha inicializado todos los inputs del componente. Ideal para inicializar datos. <code>ngOnChanges</code> Se ejecuta cada vez que hay un cambio en los inputs de un componente (cuando un valor vinculado a <code>@Input</code> cambia). <code>ngDoCheck</code> Se ejecuta durante cada ciclo de detecci\u00f3n de cambios, permitiendo la implementaci\u00f3n de una detecci\u00f3n de cambios personalizada. <code>ngAfterContentInit</code> Se ejecuta despu\u00e9s de que Angular haya proyectado contenido externo dentro del componente (solo una vez). <code>ngAfterContentChecked</code> Se ejecuta despu\u00e9s de que Angular haya verificado los cambios en el contenido proyectado en el componente. <code>ngAfterViewInit</code> Se ejecuta despu\u00e9s de que Angular inicialice las vistas del componente y sus vistas secundarias (solo una vez). <code>ngAfterViewChecked</code> Se ejecuta despu\u00e9s de que Angular verifique los cambios en las vistas del componente y sus vistas secundarias. M\u00e9todo Resumen <code>afterNextRender</code> Se ejecuta la pr\u00f3xima vez que todos los componentes hayan sido renderizados <code>afterRender</code> Se ejecuta cada vez que todos los componentes hayan sido renderizados M\u00e9todo Resumen <code>ngOnDestroy</code> Se ejecuta justo antes de que Angular destruya el componente. Ideal para liberar recursos, cancelar suscripciones, o eliminar listeners para evitar memory leaks."},{"location":"frameworks/frontend/angular/components/life_cicle/#ngonchanges","title":"ngOnChanges","text":"<p>El m\u00e9todo <code>ngOnChanges</code> acepta el argumento <code>SimpleChanges</code>. Este objeto es un registro de cada uno de los <code>SimpleChange</code>. Cada uno de estos contiene el valor previo del <code>@Input</code>, su valor actual y un indicador de si esta es la primera vez que cambia.</p> <pre><code>@Component({\n    /* ... */\n})\nexport class UserProfile {\n    @Input() name: string = '';\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const inputName in changes) {\n            const inputValues = changes[inputName];\n            console.log(`Previous ${inputName} == ${inputValues.previousValue}`);\n            console.log(`Current ${inputName} == ${inputValues.currentValue}`);\n            console.log(`Is first ${inputName} change == ${inputValues.firstChange}`);\n        }\n    }\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/life_cicle/#destroyref","title":"DestroyRef","text":"<p>Como una alternativa a <code>ngOnDestroy</code> puedes inyectar una instancia de <code>DestroyRef</code>. Puedes registrar una devoluci\u00f3n de llamada para que se invoque tras la destrucci\u00f3n del componente llamando al m\u00e9todo <code>onDestroy</code> de <code>DestryRef</code>.</p> <pre><code>@Component({\n    /* ... */\n})\nexport class UserProfile {\n    constructor(private destroyRef: DestroyRef) {\n        destroyRef.onDestroy(() =&gt; {\n            console.log('UserProfile destruction');\n        });\n    }\n}\n</code></pre> <p>Note</p> <p>Puede pasar la DestroyRef instancia a funciones o clases externas a su componente. Utilice este patr\u00f3n si tiene otro c\u00f3digo que deber\u00eda ejecutar alg\u00fan comportamiento de limpieza cuando se destruye el componente.</p>"},{"location":"frameworks/frontend/angular/components/projection/","title":"Proyecci\u00f3n de contenido","text":"<p>A menudo, es necesario crear componentes que act\u00faen como contenedores para distintos tipos de contenido. Por ejemplo, es posible que desee crear un componente <code>card</code> personalizado:</p> <pre><code>@Component({\n  selector: 'custom-card',\n  template: '&lt;div class=\"card-shadow\"&gt; &lt;ng-content&gt;&lt;/ng-content&gt; &lt;/div&gt;',\n})\nexport class CustomCard {/* ... */}\n</code></pre>"},{"location":"frameworks/frontend/angular/components/projection/#contenido-multiple","title":"Contenido m\u00faltiple","text":"<pre><code>&lt;!-- Component template --&gt;\n&lt;div class=\"card-shadow\"&gt;\n  &lt;ng-content select=\"card-title\"&gt;&lt;/ng-content&gt;\n  &lt;div class=\"card-divider\"&gt;&lt;/div&gt;\n  &lt;ng-content select=\"card-body\"&gt;&lt;/ng-content&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;!-- Using the component --&gt;\n&lt;custom-card&gt;\n  &lt;card-title&gt;Hello&lt;/card-title&gt;\n  &lt;card-body&gt;Welcome to the example&lt;/card-body&gt;\n&lt;/custom-card&gt;\n</code></pre> <pre><code>&lt;!-- Rendered DOM --&gt;\n&lt;custom-card&gt;\n  &lt;div class=\"card-shadow\"&gt;\n    &lt;card-title&gt;Hello&lt;/card-title&gt;\n    &lt;div class=\"card-divider\"&gt;&lt;/div&gt;\n    &lt;card-body&gt;Welcome to the example&lt;/card-body&gt;\n  &lt;/div&gt;\n&lt;/custom-card&gt;\n</code></pre>"},{"location":"frameworks/frontend/angular/installation/","title":"Instalaci\u00f3n y creaci\u00f3n de un nuevo proyecto","text":""},{"location":"frameworks/frontend/angular/installation/#intalar-nodejs","title":"Intalar node.js","text":"<p>Lo primero que debemos hacer es instalar node.js para el manejo de dependencias y la creaci\u00f3n del proyecto y sus respectivos componentes.</p>"},{"location":"frameworks/frontend/angular/installation/#instalar-angular","title":"Instalar Angular","text":"<p>Para instalar Angular de forma global tenemos que utilizar el comando:</p> <pre><code>npm install -g @angular/cli\n</code></pre> <p>Para instalar Angular en un proyecto tenemos que utilizar el comando desde la terminal ubic\u00e1ndose en el proyecto:</p> <pre><code>npm install @angular/cli\n</code></pre> <p>Verificamos la instalci\u00f3n son el comando:</p> <pre><code>ng version\n</code></pre> <p>Si no nos permite comprobar la versi\u00f3n de Angular utilizaremos el siguiente comando:</p> <pre><code>Set-ExecutionPolicy - ExecutionPolicy RemoteSigned -Scope CurrentUser\n</code></pre>"},{"location":"frameworks/frontend/angular/installation/#creacion-de-un-nuevo-proyecto","title":"Creaci\u00f3n de un nuevo proyecto","text":"<p>Antes de crear nuestro proyecto debemos decidir que clase de proyecto queremos usar standalone o -cl\u00e1sico_:</p> <ul> <li>Un proyecto standalone en Angular es una forma m\u00e1s reciente de configurar y desarrollar aplicaciones que permite   omitir el uso de NgModules para la organizaci\u00f3n del c\u00f3digo. Este enfoque fue introducido en Angular v14 y tiene como   objetivo simplificar la estructura del proyecto y hacer que el desarrollo de componentes sea m\u00e1s directo y menos   dependiente de los m\u00f3dulos tradicionales.</li> <li>Un proyecto no standalone o cl\u00e1sico es la forma tradicional de construir aplicaciones Angular, utilizando NgModules   para agrupar componentes, directivas, pipes, y servicios en unidades reutilizables.</li> </ul> <p>Para crear un nuevo proyecto standalone en Angular utilizamos en comando:</p> <pre><code>ng new nombreAplicacion\n</code></pre> <p>Si queremos crear un nuevo proyecto cl\u00e1sico:</p> <pre><code>ng new nombreAplicacion --standalone=false\n</code></pre> <p>El archivo package.json muestra las dependencias instaladas, la versi\u00f3n de angular y los comandos habilitados por Angular en el proyecto.</p> <p>Para iniciar el proyecto usamos el comando:</p> <pre><code>ng serve\n</code></pre>"},{"location":"frameworks/frontend/angular/project_hierarchy/","title":"Estructura del proyecto","text":"<p>La estructura del proyecto es clave para una buena comprensi\u00f3n y un manejo \u00f3ptimo del proyecto.</p> <p>Se recomienda seguir la siguiente estructura:</p> <ol> <li><code>COMPONENTS</code>: aqu\u00ed almacenaremos los distintos componentes reutilizables de nuestro proyecto como botones o contenedores.</li> <li><code>LAYOUT</code>: en este directorio situaremos el componente base de nuestra aplicaci\u00f3n, que actuar\u00e1 como la ruta padre de    los dem\u00e1s componentes.</li> <li><code>MODELS</code>: usaremos esta carpeta para almacenar las interfaces de los objetos de nuestro modelo, tanto los utilizados    por la propia aplicaci\u00f3n como de los datos recibidos por nuestra API en caso de haberla.</li> <li><code>PAGES</code>: se utiliza para almacenar las distintas p\u00e1ginas de nuestro proyecto. Se divide en dos subdirectios:<ul> <li><code>AUTH</code>: en el guardaremos todas las p\u00e1ginas correspondientes a la autentificaci\u00f3n del usuario.</li> <li><code>MAIN</code>: guardaremos en el las p\u00e1ginas de las funcionalidades principales, aquellas que est\u00e9n disponibles para el   usuario una vez iniciada la sesi\u00f3n.</li> </ul> </li> <li><code>PIPES</code>: en el guardamos las pipes personalizadas.</li> <li><code>SERVICES</code>: sirve para almacenar los servicios. Se divide en dos subdirectios:<ul> <li><code>API</code>: sirve para los m\u00e9todos que relacionan el proyecto con la API.</li> <li><code>PROJECT</code>: almacena los servicios correspondientes al proyecto en s\u00ed.</li> </ul> </li> </ol>"},{"location":"frameworks/frontend/angular/routes/","title":"Rutas","text":"<p>En el <code>app-routing.module.ts</code> se establecen las rutas de la siguiente manera:</p> <pre><code>const routes = [\n    {\n        path: 'route',\n        component: Component\n    },\n    {\n        path: 'route',\n        component: Component\n    }\n];\n</code></pre>"},{"location":"frameworks/frontend/angular/routes/#ruta-por-defecto","title":"Ruta por defecto","text":"<p>Para a\u00f1adir una ruta por defecto:</p> <pre><code>{\n    path: '', redirectTo: '/', pathMatch: 'full'\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/routes/#rutas-hijas","title":"Rutas hijas","text":"<p>Si se quiere establecer una ruta como hija de otra:</p> <pre><code>const routes: Routes = [\n    {\n        path: 'father',\n        component: FatherComponent,\n        children: [\n            {\n                path: 'child',\n                component: ChildComponent\n            }\n        ]\n    }];\n</code></pre> <p>De tal forma que la ruta para acceder al <code>component</code> ser\u00eda <code>father/child</code>, adem\u00e1s de que se aplicar\u00eda a trav\u00e9s del <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> en caso de haberlo.</p>"},{"location":"frameworks/frontend/angular/routes/#envio-de-informacion-en-la-ruta","title":"Envio de informaci\u00f3n en la ruta","text":"<p>Si queremos enviar alg\u00fan dato en la url para obtenerla en el componente al que se navega:</p> <pre><code>{\n    path: 'detail/:detailInfo', component: DetailComponent\n}\n</code></pre> <p>La mejor forma de organizar las rutas de una web ser\u00eda tener tres rutas principales:</p> <ul> <li>Login</li> <li>Registro</li> <li>Main: esta ser\u00eda la ruta padre de todas las dem\u00e1s, de manera que as\u00ed podr\u00edamos tener una p\u00e1gina base con su respectivo   men\u00fa y caracter\u00edsticas comunes y las hijas que las compartir\u00edan.</li> </ul>"},{"location":"frameworks/frontend/angular/routes/#navegacion","title":"Navegaci\u00f3n","text":""},{"location":"frameworks/frontend/angular/routes/#navegar-desde-html","title":"Navegar desde html","text":"<p>Para navegar a una ruta usaremos: </p> <pre><code>[routerLink]=\"['/route']\"\n</code></pre> <p>Para navegar a una ruta hija usaremos:</p> <pre><code>[routerLink]=\"['/father/child']\n</code></pre> <p>Para enviar informaci\u00f3n en la ruta usaremos: </p> <pre><code>[routerLink]=\"['/detail', detailInfo]\"`\n</code></pre> <p>Para acceder a los par\u00e1metros de la ruta primero se debe implementar:</p> <pre><code>import {ActivatedRoute} from '@angular/router';\n</code></pre> <pre><code>constructor(private route: ActivatedRoute) { }\n</code></pre> <pre><code>const routeParams = this.route.snapshot.paramMap;\nconst detailInfo = routeParams.get('detailInfo');\n</code></pre>"},{"location":"frameworks/frontend/angular/routes/#navegar-desde-typescript","title":"Navegar desde typescript","text":"<p>La ruta debe ser en formato String y debe estar estructurada como se ha visto previamente en la navegaci\u00f3n desde html.</p> <pre><code>import {Router} from \"@angular/router\";\n</code></pre> <pre><code>  constructor(private router: Router) { }\n</code></pre> <pre><code>this.router.navigate([route])\n      .then(() =&gt; console.log(`Correct navigation: ${route}`))\n      .catch(err =&gt; console.log(`ERROR\\t${err}`));\n</code></pre> <p>Es recomendable el uso de un servicio para utilizar la navegaci\u00f3n desde typescript para evitar repetir codigo,  dado que con el mismo m\u00e9todo en un servicio podemos navegar desde todos lo componentes tan solo inyectando el  servicio en el constructor del propio componente.</p> <p>Para enviar informaci\u00f3n en la ruta:</p> <pre><code>this.router.navigate(['user', id])\n.then(() =&gt; console.log(`Correct navigation to user with id: ${id}`))\n.catch(err =&gt; console.log(`ERROR\\t${err}`));\n</code></pre> <p>Obtendremos esta informaci\u00f3n del mismo modo que hemos visto anteriormente al enviar informaci\u00f3n por html.</p> <p>Otra forma de enviar informaci\u00f3n en la ruta ser\u00eda con <code>query params</code>:</p> <pre><code>this.router.navigate(['user'], { queryParams: { id: id, name: name } })\n  .then(() =&gt; console.log(`Correct navigation with query params: ${id}, ${name}`))\n  .catch(err =&gt; console.log(`ERROR\\t${err}`));\n</code></pre> <p>Y obtendremos las variables:</p> <pre><code>import {ActivatedRoute} from '@angular/router';\n</code></pre> <pre><code>constructor(private route: ActivatedRoute) { }\n</code></pre> <pre><code>this.route.queryParams.subscribe(params =&gt; {\n  this.id = params['id'];\n});\n</code></pre>"},{"location":"frameworks/frontend/angular/services/","title":"Servicios","text":"<p>Para crear un servicio usaremos el comando:</p> <pre><code>ng generate service directorio/servicio\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#comunicacion-con-una-api","title":"Comunicaci\u00f3n con una API","text":"<p>Debemos importar e inyectar <code>HttpClient</code> en nuestro servicio:</p> <pre><code>import { HttpClient } from '@angular/common/http';\n\nconstructor(private httpClient: HttpClient) {}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#comunicacion-con-cabeceras","title":"Comunicaci\u00f3n con cabeceras","text":"<pre><code>getInformation() {\n    let request_headers = new HttpHeaders({headers1: \"header1\"});\n    return this.httpClient.get&lt;any&gt;(API_URL, {headers: request_headers});\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#comunicacion-con-cuerpo","title":"Comunicaci\u00f3n con cuerpo","text":"<pre><code>getInformation(body) {\n    return this.httpClient.post&lt;any&gt;(API_URL, body);\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#get","title":"GET","text":"<pre><code>getInformation() {\n    return this.httpClient.get&lt;any&gt;(API_URL)\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#put","title":"PUT","text":"<pre><code>getInformation(body) {\n    return this.httpClient.put&lt;any&gt;(API_URL, body)\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#post","title":"POST","text":"<pre><code>getInformation() {\n    return this.httpClient.post&lt;any&gt;(API_URL, body)\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#delete","title":"DELETE","text":"<pre><code>getInformation() {\n    return this.httpClient.get&lt;any&gt;(API_URL)\n}\n</code></pre>"},{"location":"frameworks/frontend/angular/services/#llamar-al-servicio-desde-un-componente","title":"Llamar al servicio desde un componente","text":"<pre><code>constructor(private api_service: ServiceName) {}\ninfo = []\nthis.api_service.getInformation().subscribe((response) =&gt; {this.info = response});\n</code></pre>"},{"location":"frameworks/frontend/electron/electron-angular/","title":"Creaci\u00f3n de una aplicaci\u00f3n de escritorio con Angular y Electron","text":"<p>Lo primero que debemos hacer es instalar node.js y tener un proyecto Angular preparado.</p>"},{"location":"frameworks/frontend/electron/electron-angular/#instalar-electron","title":"Instalar Electron","text":"<pre><code>npm install --save-dev electron@latest\n</code></pre>"},{"location":"frameworks/frontend/electron/electron-angular/#configurar-el-proyecto","title":"Configurar el proyecto","text":"<p>Creamos el archivo <code>main.js</code> en la ra\u00edz del proyecto:</p> <pre><code>const {app, BrowserWindow} = require(\"electron\");\nconst path = require('path');\n\nlet appWin;\n\ncreateWindow = () =&gt; {\n  appWin = new BrowserWindow({\n    width: 800,\n    height: 600,\n    title: \"AppName\",\n    resizable: false,\n    webPreferences: {\n      contextIsolation: false,\n      nodeIntegration: true\n    }\n  });\n\n  const indexPath = path.join(__dirname, 'dist', 'browser', 'index.html');\n\n  appWin.loadURL(`file://${indexPath}`);\n\n  appWin.setMenu(null);\n\n  appWin.webContents.openDevTools();\n\n  appWin.on(\"closed\", () =&gt; {\n    appWin = null;\n  });\n}\n\napp.on(\"ready\", createWindow);\n\napp.on(\"window-all-closed\", () =&gt; {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n</code></pre> <p>Debemos ir al archivo <code>package.json</code> y modificarlo:</p> <pre><code>{\n  \"name\": \"app-name\",\n  \"version\": \"0.0.0\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\",\n    \"electron\": \"ng build &amp;&amp; electron\",\n    \"dist\": \"electron-builder\"\n  }\n}\n</code></pre> <p>Ahora debemos ir al archivo <code>angular.json</code> y modificar el <code>outputPath</code>:</p> <pre><code>\"outputPath\": \"dist\"\n</code></pre> <p>Por \u00faltimo debemos cambiar el <code>href</code> de <code>base</code> del archivo <code>index.html</code>:</p> <pre><code>&lt;base href=\"./\"&gt;\n</code></pre>"},{"location":"frameworks/frontend/electron/electron-angular/#arrancar-el-proyecto","title":"Arrancar el proyecto","text":"<pre><code>npm run electron\n</code></pre>"},{"location":"frameworks/frontend/electron/electron-angular/#comunicacion-entre-angular-y-electron","title":"Comunicaci\u00f3n entre Angular y Electron","text":"<ul> <li><code>ipcMain</code>: Se comunica de forma as\u00edncrona desde el proceso principal a los procesos de renderizado. Es decir, desde el   main.js al resto de la app.</li> <li><code>ipcRenderer</code>: Se comunica de forma as\u00edncrona desde un proceso de renderizado al proceso principal. Es decir, desde la   app al main.js.</li> </ul> <p>Lo primero que debemos hacer es crear un servicio de Angular que se encargue de manejar el <code>ipcRender</code> y que as\u00ed podamos usarlos desde toda la aplicaci\u00f3n:</p> <pre><code>import {Injectable} from \"@angular/core\";\nimport {IpcRenderer} from \"electron\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class IpcService {\n    private ipc: IpcRenderer;\n\n    constructor() {\n        if (window.require) {\n            try {\n                this.ipc = window.require(\"electron\").ipcRenderer;\n            } catch (e) {\n                throw e;\n            }\n        } else {\n            console.warn(\"Electron IPC was not loaded\");\n        }\n    }\n\n    public on(channel: string, listener: any): void {\n        if (!this.ipc) {\n            return;\n        }\n        this.ipc.on(channel, listener);\n    }\n\n    public once(channel: string, listener: any): void {\n        if (!this.ipc) {\n            return;\n        }\n        this.ipc.once(channel, listener);\n    }\n\n    public send(channel: string, ...args: any[]): void {\n        if (!this.ipc) {\n            return;\n        }\n        this.ipc.send(channel, ...args);\n    }\n\n    public removeAllListeners(channel: string): void {\n        if (!this.ipc) {\n            return;\n        }\n        this.ipc.removeAllListeners(channel);\n    }\n}\n</code></pre> <p>Ahora podemos llamar a estas funciones desde toda la App:</p> <pre><code>import {Component, OnInit} from '@angular/core';\nimport {IpcService} from 'src/app/services/ipc.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n    pong: boolean = false;\n\n    constructor(private ipcService: IpcService) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ping = (): void =&gt; {\n        this.ipcService.send(\"message\", \"ping\");\n    }\n}\n</code></pre> <p>Ahora volvemos al <code>main.js</code> para ver como recibimos el mensaje:</p> <pre><code>const {app, ipcMain, BrowserWindow} = require(\"electron\");\n\nipcMain.on(\"message\", (event) =&gt; event.reply(\"reply\", \"pong\"));\n</code></pre> <p>Esto har\u00e1 que ipcMain escuche el canal \u201cmessage\u201d y que cuando llegue un mensaje, responder otro, que en este caso es \u201cpong\u201d, por otro canal diferente llamado \u201creply\u201d.</p> <p>En nuestro componente de angular controlaremos la respuesta:</p> <pre><code>import {Component, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {IpcService} from 'src/app/services/ipc.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n    pong: boolean = false;\n\n    constructor(private ipcService: IpcService, private cdRef: ChangeDetectorRef) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ping = (): void =&gt; {\n        this.ipcService.send(\"message\", \"ping\");\n        this.ipcService.on(\"reply\", (event: any, arg: string) =&gt; {\n            this.pong = arg === \"pong\";\n            this.cdRef.detectChanges();\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.ipcService.removeAllListeners(\"reply\");\n    }\n}\n</code></pre> <p>Al destruirse el componente nos aseguramos de borrar los listeners del canal, ya que pueden provocar fugas de memoria.</p>"},{"location":"frameworks/frontend/electron/electron-angular/#biblioteca-electron-store","title":"Biblioteca electron-store","text":"<p>Esta biblioteca que permite de forma f\u00e1cil trabajar con un almacenamiento local para Electron basado en clave-valor.</p> <pre><code>npm i electron-store\n</code></pre> <p>Ahora debemos crear un servicio para que se pueda usar f\u00e1cilmente en toda la app:</p> <pre><code>import { Injectable } from '@angular/core';\nimport * as ElectronStore from 'electron-store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ElectronStoreService {\n  private store: ElectronStore;\n  constructor() {\n    if (window.require) {\n      try {\n        const storeClass = window.require(\"electron-store\");\n        this.store = new storeClass();\n      } catch (e) {\n        throw e;\n      }\n    } else {\n      console.warn(\"electron-store was not loaded\");\n    }\n   }\n\n   get = (key: string): any =&gt; {\n    return this.store.get(key);\n   }\n\n   set = (key: string, value: any): void =&gt; {\n     this.store.set(key, value);\n   }\n}\n</code></pre> <p>Ahora hay que a\u00f1adir lo siguiente en el archivo <code>main.js</code>:</p> <pre><code>const Store = require(\"electron-store\");\n\nconst store = new Store();\n\nif (!store.get(\"clicks\")) {\n    store.set(\"clicks\", 0);\n}\n</code></pre> <p>Ahora en cualquiera de nuestros componentes:</p> <pre><code>import {Component, OnInit} from '@angular/core';\nimport {ElectronStoreService} from 'src/app/services/electron-store.service';\n\n@Component({\n    selector: 'app-game',\n    templateUrl: './game.component.html',\n    styleUrls: ['./game.component.scss']\n})\nexport class GameComponent implements OnInit {\n    clicks: number = 0;\n    saved: boolean = true;\n\n    constructor(private electronStoreService: ElectronStoreService) {\n    }\n\n    ngOnInit(): void {\n        this.clicks = this.electronStoreService.get(\"clicks\");\n    }\n\n    addClicks = (): void =&gt; {\n        this.clicks++;\n        this.saved = false;\n    }\n\n    save = (): void =&gt; {\n        this.electronStoreService.set(\"clicks\", this.clicks);\n        this.saved = true;\n    }\n}\n</code></pre> <p>ngOnInit() se encarga de recuperar los clics guardados en local, addClicks() se llama cada vez que el bot\u00f3n es pulsado, y save() guarda la puntuaci\u00f3n.</p>"},{"location":"frameworks/frontend/electron/electron-angular/#crear-el-instalador-de-la-aplicacion","title":"Crear el instalador de la aplicaci\u00f3n","text":""},{"location":"frameworks/frontend/electron/electron-angular/#asegurarse-de-haber-construido-la-aplicacion-de-angular-previamente","title":"Asegurarse de haber construido la aplicaci\u00f3n de angular previamente","text":"<pre><code>ng build\n</code></pre>"},{"location":"frameworks/frontend/electron/electron-angular/#crear-el-instalador","title":"Crear el instalador","text":"<pre><code>npm run dist\n</code></pre> <p>Se crea un archivo <code>.exe</code> en la carpeta <code>dist_electron</code>, que al ejecutarlo instala la app.</p>"},{"location":"frameworks/frontend/mkdocs/","title":"Introducci\u00f3n","text":"<p>MkDocs es una herramienta de generaci\u00f3n de sitios est\u00e1ticos que se centra en la creaci\u00f3n de documentaci\u00f3n de proyectos. Es f\u00e1cil de configurar y permite generar documentaci\u00f3n elegante usando Markdown.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Simplicidad: Usa Markdown para escribir tus documentos.</li> <li>Temas: Incluye varios temas atractivos, incluyendo Material Design.</li> <li>Despliegue f\u00e1cil: Publica en GitHub Pages, GitLab Pages, o tu servidor preferido.</li> </ul>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar MkDocs, necesitas tener Python y <code>pip</code> instalados en tu sistema.</p> <pre><code>pip install mkdocs\n</code></pre>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#verificar-la-instalacion","title":"Verificar la Instalaci\u00f3n","text":"<p>Para asegurarte de que MkDocs se ha instalado correctamente, ejecuta el siguiente comando:</p> <pre><code>mkdocs --version\n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de MkDocs que has instalado.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#creacion-de-un-proyecto-nuevo","title":"Creaci\u00f3n de un Proyecto Nuevo","text":"<p>Para crear un proyecto nuevo, usa el siguiente comando:</p> <pre><code>mkdocs new nombre-de-tu-proyecto\n</code></pre> <p>Esto crear\u00e1 una estructura b\u00e1sica de archivos y carpetas que puedes empezar a personalizar.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#estructura-de-carpetas","title":"Estructura de Carpetas","text":"<p>Un proyecto t\u00edpico de MkDocs tendr\u00e1 la siguiente estructura de carpetas:</p> <pre><code>nombre-de-tu-proyecto/\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 index.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <ul> <li>docs/: Aqu\u00ed es donde ir\u00e1n todos tus archivos de documentaci\u00f3n en formato Markdown.</li> <li>mkdocs.yml: Este es el archivo de configuraci\u00f3n principal de MkDocs.</li> </ul>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#configuracion-basica","title":"Configuraci\u00f3n B\u00e1sica","text":"<p>El archivo mkdocs.yml es donde configurar\u00e1s tu sitio de documentaci\u00f3n. Aqu\u00ed un ejemplo b\u00e1sico:</p> <pre><code>site_name: Mi Proyecto\ntheme:\n  name: material\n\nnav:\n  - Inicio: index.md\n  - Acerca de: about.md\n</code></pre>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#personalizacion","title":"Personalizaci\u00f3n","text":"<p>Puedes personalizar tu sitio modificando el archivo mkdocs.yml. Algunas opciones comunes incluyen:</p> <ul> <li>Cambiar el tema: Hay varios temas disponibles que puedes usar.</li> <li>A\u00f1adir un favicon: Puedes a\u00f1adir un \u00edcono personalizado a tu sitio.</li> </ul> <pre><code>extra:\n  favicon: 'img/logo.png'\n</code></pre>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#desarrollando-el-sitio","title":"Desarrollando el Sitio","text":"<p>Durante el desarrollo, puedes usar el servidor de desarrollo integrado de MkDocs para ver los cambios en tiempo real:</p> <pre><code>mkdocs serve\n</code></pre> <p>Esto abrir\u00e1 un servidor en http://127.0.0.1:8000/ o http://localhost:8000/ donde podr\u00e1s ver tu sitio.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#despliegue-del-sitio","title":"Despliegue del Sitio","text":"<p>Para desplegar tu sitio, primero debes construirlo con el comando:</p> <pre><code>mkdocs build\n</code></pre> <p>Esto generar\u00e1 una carpeta site/ con todos los archivos est\u00e1ticos de tu sitio. Puedes subir esta carpeta a cualquier servidor o servicio de hosting, como GitHub Pages.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#admonitions","title":"Admonitions","text":"<p>Admonitions son bloques de contenido en documentaci\u00f3n que se utilizan para resaltar y categorizar informaci\u00f3n importante, notas, advertencias o recomendaciones. Su prop\u00f3sito es captar la atenci\u00f3n del lector y proporcionar contexto adicional de manera visualmente destacada. Estos bloques pueden variar en apariencia y estilo seg\u00fan el sistema de documentaci\u00f3n o el tema que est\u00e9s utilizando.</p> <p>Para instalarlas a\u00f1adiremos a nuestro fichero <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n</code></pre> <p>Tipos de admonition:</p> <ul> <li>note :material-pencil-circle:</li> <li>abstract</li> <li>info</li> <li>tip</li> <li>success</li> <li>question</li> <li>warning</li> <li>failure</li> <li>danger</li> <li>bug</li> <li>example</li> <li>quote</li> </ul> <p>Se usan de la siguiente manera:</p> <pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#ejemplo-completo-de-mkdocsyml","title":"Ejemplo Completo de mkdocs.yml","text":"<p>Aqu\u00ed tienes un ejemplo m\u00e1s completo de un archivo mkdocs.yml:  </p> <pre><code>site_name: Documentaci\u00f3n de Ejemplo\n\ntheme:\n  name: material\n  language: es\n  logo: img/logo.png\n  favicon: img/logo.png\n  features:\n    - content.code.copy\n    - navigation.instant\n    - navigation.instant.progress\n    - navigation.tracking\n    - navigation.tabs\n    - navigation.top\n  font:\n    text: Rubik\n    code: Roboto Mono\n\nnav:\n  - Inicio: index.md\n  - Gu\u00eda de Usuario:\n      - Instalaci\u00f3n: user-guide/installation.md\n      - Configuraci\u00f3n: user-guide/configuration.md\n  - Referencia: reference.md\n  - Acerca de: about.md\n\n\nextra_css:\n  - stylesheets/style.css\n\nmarkdown_extensions:\n  - admonition\n\nextra:\n  consent:\n    title: Cookie consent\n    description: &gt;-\n      Usamos cookies para reconocer tus visitas y preferencias repetidas, \n      as\u00ed como para medir la efectividad de nuestra documentaci\u00f3n y si \n      los usuarios encuentran lo que buscan. Con tu consentimiento, \n      nos ayudas a mejorar nuestra documentaci\u00f3n.\n</code></pre>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/mkdocs/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n Oficial de MkDocs</li> <li>GitHub de Material para MkDocs</li> <li>P\u00e1gina de Material para MkDocs</li> </ul>","tags":["Finished","20/08/2024"]},{"location":"frameworks/frontend/react/","title":"React","text":"<p>React es una biblioteca de javascript que est\u00e1 pensada para construir interfaces de usuario.</p> <p>Cuando usamos React no estamos escribiendo HTML, sino que estamos escribiendo JSX y el propio react lo compila a javascript.</p>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#crear-una-aplicacion","title":"Crear una aplicaci\u00f3n","text":"<p>Lo primero que debemos hacer es instalar node.js para el manejo de dependencias y la creaci\u00f3n del proyecto y sus respectivos componentes.</p> <p>Para crear nuestro proyecto vamos a usar Vite</p> <pre><code>npm init -y\n</code></pre> <pre><code>npm create vite@latest\n</code></pre> <p>Escogeremos la opci\u00f3n <code>JavaScript + SWC</code></p> <p>Entramos en la carpeta que se ha creado con el nombre de nuestro proyecto:</p> <pre><code>npm install\n</code></pre> <pre><code>npm run dev\n</code></pre>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#componentes","title":"Componentes","text":"<p>Los nombres de los componentes deben estar siempre en PascalCase</p> <pre><code>function Calculate() {\n    let number = 0;\n\n    return (\n        &lt;p&gt;Number: {number}&lt;/p&gt;\n    )\n}\n</code></pre> <pre><code>function Input() {\n    let myPlaceHolder = \"Escribe aqu\u00ed\";\n\n    return (\n        &lt;input myPlaceholder={placeHolder}/&gt;\n    )\n}\n</code></pre>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#estados","title":"Estados","text":"<p>Es un estado interno que corresponde a cada componente individualmente.</p> <pre><code>import { useState } from 'react';\n</code></pre> <pre><code>// Le pasamos al useState el valor por defecto de la variable `isFollowing`\nconst [isFollowing, setIsFollowing] = useState(false);\nconst handleClick = () =&gt; {\n    setIsFollowing(!isFollowing)\n}\n</code></pre> <pre><code>&lt;button onClick={handleClick}&gt;Button&lt;/button&gt;\n</code></pre> <pre><code>function Calculate() {\n    const [number, setNumber] = useState(0);\n\n    const addOne = () =&gt; {\n        setNumber(number + 1);\n    }\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;Number: {number}&lt;/p&gt;\n            &lt;button onClick={addOne}&gt;&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#renderizado-de-listas","title":"Renderizado de listas","text":"<pre><code>function MovieList()  {\n    const movies = [\"Lord of the rings\", \"Dune\", \"Shrek\"];\n\n    const HTMLMovies = movies.map((movie, index) =&gt; {\n        return (&lt;p key={movie}&gt;{index + 1} - {movie}&lt;/p&gt;)\n    })\n\n    return (\n        &lt;section&gt;\n            {HTMLMovies}\n        &lt;/section&gt;\n    )\n}\n</code></pre> <p>Para renderizar una lista de objetos:</p> <pre><code>function MovieList()  {\n    const animal = [{id: 1, name: \"dog\", species: \"mamal\"}, {id: 2, name: \"shark\", species: \"fish\"}];\n\n    const HTMLAnimals = animal.map((animal) =&gt; {\n        return (&lt;li key={animal.id}&gt;{animal.name}&lt;/li&gt;)\n    })\n\n    return (\n        &lt;section&gt;\n            {HTMLAnimals}\n        &lt;/section&gt;\n    )\n}\n</code></pre>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#proyeccion-de-contenido","title":"Proyecci\u00f3n de contenido","text":"<p>Cuando queremos proyectar contenido dentro de un componente debemos usar la palabra reservada <code>children</code>.</p> <pre><code>export function Card({children}) {\n    return (\n        &lt;div className=\"card\"&gt;\n            { children }\n        &lt;/div&gt;\n    )\n}\n</code></pre> <pre><code>export function App() {\n    return (\n        &lt;Card&gt;\n            &lt;p&gt;Este contenido se proyectar\u00e1 dentro del componente Card&lt;/p&gt;\n        &lt;/Card&gt;\n    )\n}\n</code></pre> <p>Para pasar todos los props como un solo objeto se hace de la siguiente manera:</p> <pre><code>const object = { a: true, b: 'b'}\nreturn (\n    &lt;Component {...object}&gt;&lt;/Component&gt;\n)\n</code></pre> <p>Aunque esto \u00faltimo no es una buena pr\u00e1ctica.</p>","tags":["In development","Pending review","24/11/2024"]},{"location":"frameworks/frontend/react/#ciclos-de-vida-de-los-componentes","title":"Ciclos de vida de los componentes","text":"<ul> <li>Mount: Cada vez que aparece en la p\u00e1gina.</li> <li>Updates: Cada vez que el estado cambia.</li> <li>Unmount: Cuando se elimina de la p\u00e1gina.</li> </ul> <p>El DOM virtual hace que cuando se produce un cambio lo \u00fanico que modifica en el DOM es la parte que ha recibido un cambio.</p> <p>Cada vez que se realiza un cambio en un estado React identifica que debe renderizar de nuevo las partes que han cambiado.</p> <p>La otra forma de volver a renderizar de nuevo un componente es que su componente padre se vuelva a renderizar.</p>","tags":["In development","Pending review","24/11/2024"]},{"location":"languages/bashScript/","title":"Bash Script","text":"","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#introduccion","title":"Introducci\u00f3n","text":"<p>Bash es un int\u00e9rprete de comandos de Unix que tambi\u00e9n se puede usar para escribir scripts. Los scripts de Bash permiten automatizar tareas en sistemas Unix y Linux.</p>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#estructura-de-un-script-bash","title":"Estructura de un Script Bash","text":"<p>Un script Bash es un archivo de texto que contiene una serie de comandos que se ejecutan en secuencia. Aqu\u00ed est\u00e1 la estructura b\u00e1sica:</p> <pre><code>#!/bin/bash\n\n# Comentario: Esto es un comentario en Bash\necho \"\u00a1Hola, Mundo!\"\n</code></pre> <p><code>#!/bin/bash</code>: Esta l\u00ednea, conocida como shebang, indica al sistema que use Bash para interpretar el script.</p> <p><code>echo \"\u00a1Hola, Mundo!\"</code>: Imprime el texto en la consola.</p>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#variables","title":"Variables","text":"<pre><code>#!/bin/bash\n\nnombre=\"Juan\"\necho \"Hola, $nombre\"\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#estructuras-de-control","title":"Estructuras de Control","text":"","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#condicionales","title":"Condicionales","text":"<pre><code>#!/bin/bash\n\nedad=18\n\nif [ $edad -ge 18 ]; then\n    echo \"Eres mayor de edad.\"\nelse\n    echo \"Eres menor de edad.\"\nfi\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#for","title":"For","text":"<pre><code>#!/bin/bash\n\nfor i in {1..5}; do\n    echo \"N\u00famero $i\"\ndone\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#while","title":"While","text":"<pre><code>#!/bin/bash\n\ncontador=1\n\nwhile [ $contador -le 5 ]; do\n    echo \"Contador $contador\"\n    ((contador++))\ndone\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#funciones","title":"Funciones","text":"<pre><code>#!/bin/bash\n\nsaludar() {\n    echo \"Hola, $1\"\n}\n\nsaludar \"Mundo\"\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#manejo-de-argumentos","title":"Manejo de Argumentos","text":"<pre><code>#!/bin/bash\n\necho \"Primer argumento: $1\"\necho \"Segundo argumento: $2\"\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#manejo-de-errores","title":"Manejo de Errores","text":"<pre><code>#!/bin/bash\n\ncomando_que_puede_fallar\nif [ $? -ne 0 ]; then\n    echo \"El comando fall\u00f3.\"\nfi\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#lectura-de-entrada","title":"Lectura de Entrada","text":"<pre><code>#!/bin/bash\n\necho \"Introduce tu nombre:\"\nread nombre\necho \"Hola, $nombre\"\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#redireccion-y-pipes","title":"Redirecci\u00f3n y pipes","text":"","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#redireccion-de-salida","title":"Redirecci\u00f3n de salida","text":"<pre><code>echo \"Texto\" &gt; archivo.txt\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#redireccion-de-error-2-para-redirigir-errores-a-un-archivo","title":"Redirecci\u00f3n de Error: 2&gt; para redirigir errores a un archivo.","text":"<pre><code>comando_inexistente 2&gt; error.log\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#pipes-para-canalizar-la-salida-de-un-comando-a-otro","title":"Pipes: | para canalizar la salida de un comando a otro.","text":"<pre><code>ls | grep \"archivo\"\n</code></pre>","tags":["Pending review","02/09/2024"]},{"location":"languages/bashScript/#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de bash</li> <li>Tutorial de Bash Scripting</li> </ul>","tags":["Pending review","02/09/2024"]},{"location":"languages/c%2B%2B/","title":"C++","text":"<p>Para incluir una librer\u00eda:</p> <pre><code>#include &lt;iostream&gt;\n</code></pre>","tags":["In development","Pending review","24/11/2024"]},{"location":"languages/java/","title":"Java","text":"","tags":["In development","23/09/2024"]},{"location":"languages/java/#print","title":"Print","text":"<pre><code>System.out.println(\"Hola Mundo\");\n</code></pre> <p>Para imprimir sin salto de l\u00ednea al final:</p> <pre><code>System.out.print(\"Hola Mundo\");\n</code></pre>","tags":["In development","23/09/2024"]},{"location":"languages/java/#input","title":"Input","text":"<pre><code>Scanner teclado = new Scanner(System.in);\n\nint i = teclado.nextInt();\n</code></pre>","tags":["In development","23/09/2024"]},{"location":"languages/java/#longitud","title":"Longitud","text":"<pre><code>String nombre = \"aaa\";\n\nnombre.length();\n</code></pre>","tags":["In development","23/09/2024"]},{"location":"languages/java/control_structures/","title":"Estructuras de control","text":""},{"location":"languages/java/control_structures/#if","title":"If","text":"<pre><code>if (x &lt; 1) {\n    System.out.println(\"MENOR\");\n} else {\n    System.out.println(\"MAYOR\");\n}    \n</code></pre>"},{"location":"languages/java/control_structures/#while","title":"While","text":"<pre><code> x = 0;\nwhile (x &lt; 1) {\n    x++;\n}\n</code></pre>"},{"location":"languages/java/control_structures/#for","title":"For","text":"<pre><code>for (int i = 0; i  &lt; 1; i++) {\n    System.out.println(i);\n}\n</code></pre>"},{"location":"languages/kotlin/","title":"Kotlin","text":"","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#tipos-de-variables","title":"Tipos de variables","text":"<pre><code>val numero: Int = 10\nval pi: Double = 3.14\nval esVerdadero: Boolean = true\nval letra: Char = 'A'\nval texto: String = \"Kotlin es genial!\"\n</code></pre> <p>En Kotlin, puedes declarar variables usando val o var:</p> <ul> <li><code>val</code>: Inmutable (como final en Java). No se puede reasignar.</li> <li><code>var</code>: Mutable. Se puede reasignar.</li> </ul> <pre><code>val nombre = \"Juan\"  // No puede ser cambiado\nvar edad = 25        // Puede ser cambiado\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#arrays-o-listas","title":"Arrays o Listas","text":"<pre><code>val lista = listOf(\"Manzana\", \"Banana\", \"Cereza\")\nprintln(lista[1])  // Banana\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#sets-o-conjuntos","title":"Sets o conjuntos","text":"<pre><code>val conjunto = setOf(1, 2, 3, 2, 1)\nprintln(conjunto.size)  // 3\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#maps-o-mapas","title":"Maps o Mapas","text":"<pre><code>val mapa = mapOf(1 to \"Uno\", 2 to \"Dos\", 3 to \"Tres\")\nprintln(mapa[2])  // Dos\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#estructuras-de-control","title":"Estructuras de Control","text":"","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#ifelse","title":"If/Else","text":"<pre><code>val numero = 10\n\nif (numero &gt; 0) {\n    println(\"N\u00famero positivo\")\n} else {\n    println(\"N\u00famero negativo\")\n}\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#when-switch","title":"When (Switch)","text":"<pre><code>val dia = 3\n\nval diaSemana = when (dia) {\n    1 -&gt; \"Lunes\"\n    2 -&gt; \"Martes\"\n    3 -&gt; \"Mi\u00e9rcoles\"\n    4 -&gt; \"Jueves\"\n    5 -&gt; \"Viernes\"\n    6 -&gt; \"S\u00e1bado\"\n    7 -&gt; \"Domingo\"\n    else -&gt; \"D\u00eda no v\u00e1lido\"\n}\n\nprintln(diaSemana)\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#for","title":"For","text":"<pre><code>for (i in 1..5) {\n    println(i)\n}\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#while","title":"While","text":"<pre><code>var i = 1\n\nwhile (i &lt;= 5) {\n    println(i)\n    i++\n}\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#funciones","title":"Funciones","text":"<p>Las funciones en Kotlin se declaran con la palabra clave fun:</p> <pre><code>fun suma(a: Int, b: Int): Int {\n    return a + b\n}\n\nval resultado = suma(5, 10)\nprintln(resultado)  // 15\n</code></pre> <p>Tambi\u00e9n puedes definir funciones de una sola l\u00ednea:</p> <pre><code>fun resta(a: Int, b: Int) = a - b\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#clases-y-objetos","title":"Clases y Objetos","text":"<p>Kotlin soporta la programaci\u00f3n orientada a objetos:</p> <pre><code>class Persona(val nombre: String, var edad: Int)\n\nval persona = Persona(\"Juan\", 25)\nprintln(persona.nombre)  // Juan\nprintln(persona.edad)    // 25\n\npersona.edad = 26\nprintln(persona.edad)    // 26\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/kotlin/#null-safety","title":"Null Safety","text":"<p>Kotlin maneja los valores nulos de manera segura para evitar excepciones de puntero nulo.</p> <pre><code>var nombre: String? = \"Juan\"\nnombre = null  // Esto es v\u00e1lido\n\n// Uso seguro con null\nval longitud = nombre?.length ?: 0\nprintln(longitud)  // 0\n</code></pre>","tags":["In development","Pending review","02/08/204"]},{"location":"languages/python/","title":"Introducci\u00f3n","text":"","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#print","title":"Print","text":"<pre><code>print(\"Hola mundo\")\n</code></pre> <pre><code>print(\"Primera l\u00ednea\\nSegunda l\u00ednea\\nTercera l\u00ednea\")\n</code></pre> <pre><code>print(\"Primera l\u00ednea\", end=\" \")\nprint(\"Segunda l\u00ednea\", end=\" \")\nprint(\"Tercera l\u00ednea\")\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#input","title":"Input","text":"<pre><code>nombre = input(\"\u00bfCu\u00e1l es tu nombre? \")\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#longitud","title":"Longitud","text":"<pre><code>mi_lista = [1, 2, 3, 4, 5]\nprint(len(mi_lista))  # Output: 5\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#type","title":"Type","text":"<pre><code>print(type(123))  # Output: &lt;class 'int'&gt;\nprint(type(3.14))  # Output: &lt;class 'float'&gt;\nprint(type(\"Hola\"))  # Output: &lt;class 'str'&gt;\nprint(type([1, 2, 3]))  # Output: &lt;class 'list'&gt;\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<pre><code>print(int(\"123\"))  # Output: 123\nprint(float(\"3.14\"))  # Output: 3.14\nprint(str(123))  # Output: '123'\nprint(list(\"Hola\"))  # Output: ['H', 'o', 'l', 'a']\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#range","title":"Range","text":"<p>La funci\u00f3n range() se utiliza para generar una secuencia de n\u00fameros. Com\u00fanmente se usa en bucles for.</p> <pre><code>range(inicio, fin, paso)\n</code></pre> <p>Note</p> <p><code>inicio</code>: El valor inicial de la secuencia (por defecto es 0). <code>fin</code>: El valor final de la secuencia (no se incluye en la secuencia). <code>paso</code>: El incremento entre los n\u00fameros (por defecto es 1).</p>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#max-y-min","title":"Max y Min","text":"<pre><code>mi_lista = [1, 2, 3, 4, 5]\nprint(max(mi_lista))  # Output: 5\nprint(min(mi_lista))  # Output: 1\n</code></pre> <pre><code>cadena = \"python\"\nprint(max(cadena))  # Output: 'y'\n\ncadena = \"python\"\nprint(min(cadena))  # Output: 'P'\n</code></pre> <pre><code>lista = [\"manzana\", \"banana\", \"cereza\", \"uva\"]\nprint(max(lista))  # Output: 'uva'\n\nlista = [\"manzana\", \"banana\", \"cereza\", \"uva\"]\nprint(min(lista))  # Output: 'banana'\n</code></pre> <p>Note</p> <p>Las comparaciones de cadenas de texto se hacen car\u00e1cter por car\u00e1cter en el orden de sus valores ASCII</p>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#sorted","title":"Sorted","text":"<pre><code>mi_lista = [5, 2, 3, 1, 4]\nprint(sorted(mi_lista))  # Output: [1, 2, 3, 4, 5]\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#zip","title":"Zip","text":"<p>La funci\u00f3n zip() combina varios iterables, emparejando elementos en tuplas.</p> <pre><code>nombres = [\"Juan\", \"Maria\", \"Pedro\"]\nedades = [30, 25, 40]\ncombinados = zip(nombres, edades)\nprint(list(combinados))  # Output: [('Juan', 30), ('Maria', 25), ('Pedro', 40)]\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/#argumentos-de-entrada","title":"Argumentos de entrada","text":"<pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"Este script demuestra el uso de argparse.\")\n\nparser.add_argument('nombre', type=str, help='Tu nombre', default=\"Pepito Grillo\")\nparser.add_argument('-e, --edad', type=int, help='Tu edad', required=False)\nargs = parser.parse_args()\n\nprint(args.edad, args.nombre)\n</code></pre>","tags":["In development","Pending review","23/09/2024"]},{"location":"languages/python/control_structures/","title":"Estructuras de control","text":""},{"location":"languages/python/control_structures/#if","title":"If","text":"<pre><code>if edad &gt;= 18:\n    print(\"Eres mayor de edad\")\nelse:\n    print(\"Eres menor de edad\")\n</code></pre>"},{"location":"languages/python/control_structures/#while","title":"While","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(\"El contador es:\", contador)\n    contador += 1\n</code></pre>"},{"location":"languages/python/control_structures/#for","title":"For","text":"<pre><code>frutas = [\"manzana\", \"banana\", \"cereza\"]\nfor fruta in frutas:\n    print(fruta)\n</code></pre> <pre><code>for contador in range(5):\n    print(\"El contador es:\", contador)\n</code></pre>"},{"location":"languages/python/databases/mongodb/","title":"MongoDB","text":"<p>Note</p> <p>Hay que instalar previamente pymongo</p> <pre><code>pip install pymongo\n</code></pre> <pre><code>from pymongo import MongoClient\n</code></pre>"},{"location":"languages/python/databases/mongodb/#conectarse-a-un-servidor-de-mongodb","title":"Conectarse a un servidor de MongoDB","text":"<pre><code>cliente = MongoClient('mongodb://localhost:27017/')\n</code></pre>"},{"location":"languages/python/databases/mongodb/#conectarse-a-una-base-de-datos-en-mongodb","title":"Conectarse a una base de datos en MongoDB","text":"<p>db = cliente['nombre_de_la_base_de_datos']</p>"},{"location":"languages/python/databases/mongodb/#insertar-datos","title":"Insertar datos","text":"<pre><code>datos = [\n    {\"nombre\": \"Juan\", \"edad\": 30},\n    {\"nombre\": \"Mar\u00eda\", \"edad\": 25},\n    {\"nombre\": \"Pedro\", \"edad\": 40}\n]\n\ncoleccion.insert_many(datos)\n</code></pre>"},{"location":"languages/python/databases/mongodb/#leer-datos","title":"Leer datos","text":"<pre><code>coleccion = db['nombre_de_la_coleccion']\n\ndocumentos = coleccion.find()\n</code></pre>"},{"location":"languages/python/databases/mysql/","title":"MySQL","text":"<p>Note</p> <p>Hay que instalar previamente mysql-connector-python</p> <pre><code>pip install mysql-connector-python\n</code></pre> <pre><code>import mysql.connector\n</code></pre>"},{"location":"languages/python/databases/mysql/#conectar-a-una-base-de-datos","title":"Conectar a una base de datos","text":"<pre><code>conexion = mysql.connector.connect(\n    host=\"localhost\",\n    database=\"nombre_de_la_base_de_datos\",\n    user=\"nombre_de_usuario\",\n    password=\"contrase\u00f1a\"\n)\n</code></pre>"},{"location":"languages/python/databases/mysql/#crear-un-cursor","title":"Crear un cursor","text":"<pre><code>cursor = conexion.cursor()\n</code></pre>"},{"location":"languages/python/databases/mysql/#crear-una-tabla","title":"Crear una tabla","text":"<pre><code>cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS usuarios (\n            id SERIAL PRIMARY KEY,\n            nombre TEXT,\n            edad INTEGER\n        )\n    \"\"\")\n</code></pre>"},{"location":"languages/python/databases/mysql/#insertar-datos","title":"Insertar datos","text":"<pre><code>cursor.execute(\"INSERT INTO usuarios (nombre, edad) VALUES (%s, %s)\", (\"Juan\", 30))\n</code></pre>"},{"location":"languages/python/databases/mysql/#guardar-los-cambios","title":"Guardar los cambios","text":"<pre><code>conexion.commit()\n</code></pre>"},{"location":"languages/python/databases/mysql/#obtener-datos","title":"Obtener datos","text":"<pre><code>cursor.execute(\"SELECT * FROM usuarios\")\n\nfilas = cursor.fetchall()\n</code></pre>"},{"location":"languages/python/databases/mysql/#cerrar-la-conexion","title":"Cerrar la conexi\u00f3n","text":"<pre><code>conexion.close()\n</code></pre>"},{"location":"languages/python/databases/mysql/#excepciones","title":"Excepciones","text":"<pre><code>mysql.connector.Error\n</code></pre>"},{"location":"languages/python/databases/postgresql/","title":"PostgreSQL","text":"<p>Note</p> <p>Hay que instalar previamente psycopg2</p> <pre><code>pip install psycopg2\n</code></pre> <pre><code>import psycopg2\n</code></pre>"},{"location":"languages/python/databases/postgresql/#conectar-a-una-base-de-datos","title":"Conectar a una base de datos","text":"<pre><code>conexion = psycopg2.connect(\n    host=\"localhost\",\n    database=\"nombre_de_la_base_de_datos\",\n    user=\"nombre_de_usuario\",\n    password=\"contrase\u00f1a\"\n)\n</code></pre>"},{"location":"languages/python/databases/postgresql/#crear-un-cursor","title":"Crear un cursor","text":"<pre><code>cursor = conexion.cursor()\n</code></pre>"},{"location":"languages/python/databases/postgresql/#crear-una-tabla","title":"Crear una tabla","text":"<pre><code>cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS usuarios (\n            id SERIAL PRIMARY KEY,\n            nombre TEXT,\n            edad INTEGER\n        )\n    \"\"\")\n</code></pre>"},{"location":"languages/python/databases/postgresql/#insertar-datos","title":"Insertar datos","text":"<pre><code>cursor.execute(\"INSERT INTO usuarios (nombre, edad) VALUES (%s, %s)\", (\"Juan\", 30))\n</code></pre>"},{"location":"languages/python/databases/postgresql/#guardar-los-cambios","title":"Guardar los cambios","text":"<pre><code>conexion.commit()\n</code></pre>"},{"location":"languages/python/databases/postgresql/#obtener-datos","title":"Obtener datos","text":"<pre><code>cursor.execute(\"SELECT * FROM usuarios\")\n\nfilas = cursor.fetchall()\n</code></pre>"},{"location":"languages/python/databases/postgresql/#cerrar-la-conexion","title":"Cerrar la conexi\u00f3n","text":"<pre><code>conexion.close()\n</code></pre>"},{"location":"languages/python/databases/postgresql/#excepciones","title":"Excepciones","text":"<pre><code>Exception, psycopg2.Error\n</code></pre>"},{"location":"languages/python/databases/sqlite/","title":"SQLite","text":"<pre><code>import sqlite3\n</code></pre>"},{"location":"languages/python/databases/sqlite/#conectar-a-una-base-de-datos","title":"Conectar a una base de datos","text":"<pre><code>conexion = sqlite3.connect('ejemplo.db')\n</code></pre>"},{"location":"languages/python/databases/sqlite/#crear-un-cursor","title":"Crear un cursor","text":"<pre><code>cursor = conexion.cursor()\n</code></pre>"},{"location":"languages/python/databases/sqlite/#crear-una-tabla","title":"Crear una tabla","text":"<pre><code>cursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (\n                    id INTEGER PRIMARY KEY,\n                    nombre TEXT,\n                    edad INTEGER\n                )''')\n</code></pre>"},{"location":"languages/python/databases/sqlite/#insertar-datos","title":"Insertar datos","text":"<pre><code>cursor.execute(\"INSERT INTO usuarios (nombre, edad) VALUES (?, ?)\", ('Juan', 30))\n</code></pre>"},{"location":"languages/python/databases/sqlite/#guardar-los-cambios","title":"Guardar los cambios","text":"<pre><code>conexion.commit()\n</code></pre>"},{"location":"languages/python/databases/sqlite/#obtener-datos","title":"Obtener datos","text":"<pre><code>cursor.execute(\"SELECT * FROM usuarios\")\n\nfilas = cursor.fetchall()\n</code></pre>"},{"location":"languages/python/databases/sqlite/#cerrar-la-conexion","title":"Cerrar la conexi\u00f3n","text":"<pre><code>conexion.close()\n</code></pre>"},{"location":"languages/python/files_directories/","title":"Manejo de ficheros y directorios","text":""},{"location":"languages/python/files_directories/#crear-un-directorio","title":"Crear un directorio","text":"<pre><code>import os\n\nos.makedirs(\"nombre_directorio\")\n</code></pre>"},{"location":"languages/python/files_directories/#crear-un-archivo","title":"Crear un archivo","text":"<pre><code>nombre_archivo = \"nuevo_archivo.txt\"\n\nwith open(nombre_archivo, 'w') as archivo:\n    archivo.write(\"Este es el contenido del archivo.\\n\")\n</code></pre>"},{"location":"languages/python/files_directories/#listar-el-contenido-de-un-directorio","title":"Listar el contenido de un directorio","text":"<pre><code>contenido_directorio = os.listdir()\n\nfor elemento in contenido_directorio:\n    print(elemento)\n</code></pre>"},{"location":"languages/python/files_directories/#listar-el-contenido-de-un-directorio-y-el-contenido-de-sus-subdirectorios","title":"Listar el contenido de un directorio y el contenido de sus subdirectorios","text":"<pre><code>import os\n\ndef listar_contenido_directorio(directorio):\n    for directorio_actual, subdirectorios, archivos in os.walk(directorio):\n        print(f\"Contenido de {directorio_actual}:\")\n\n        for archivo in archivos:\n            print(os.path.join(directorio_actual, archivo))\n\n        for subdirectorio in subdirectorios:\n            print(os.path.join(directorio_actual, subdirectorio))\n\ndirectorio = \"ruta/al/directorio\"\n\nlistar_contenido_directorio(directorio)\n</code></pre>"},{"location":"languages/python/files_directories/#renombrar-un-archivo-o-directorio","title":"Renombrar un archivo o directorio","text":"<pre><code>import os\n\nnombre_original = \"antiguo_nombre.txt\"\nnuevo_nombre = \"nuevo_nombre.txt\"\n\nos.rename(nombre_original, nuevo_nombre)\n</code></pre>"},{"location":"languages/python/files_directories/#eliminar-un-archivo","title":"Eliminar un archivo","text":"<pre><code>import os\n\nnombre_archivo_a_eliminar = \"archivo_a_eliminar.txt\"\n\nos.remove(nombre_archivo_a_eliminar)\n</code></pre>"},{"location":"languages/python/files_directories/#eliminar-un-directorio-y-su-contenido","title":"Eliminar un directorio y su contenido","text":"<pre><code>import shutil\n\nnombre_directorio_a_eliminar = \"directorio_a_eliminar\"\n\nshutil.rmtree(nombre_directorio_a_eliminar)\n</code></pre>"},{"location":"languages/python/files_directories/#mover-archivo","title":"Mover archivo","text":"<pre><code>import shutil\n\nubicacion_original = \"ruta/al/archivo/original.txt\"\nubicacion_destino = \"ruta/a/la/ubicacion/de/destino/archivo.txt\"\n\nshutil.move(ubicacion_original, ubicacion_destino)\n</code></pre>"},{"location":"languages/python/files_directories/#mover-directorio","title":"Mover directorio","text":"<pre><code>ubicacion_directorio_original = \"ruta/al/directorio/original\"\nubicacion_directorio_destino = \"ruta/a/la/ubicacion/de/destino/directorio\"\n\nshutil.move(ubicacion_directorio_original, ubicacion_directorio_destino)\n</code></pre>"},{"location":"languages/python/files_directories/file_read/","title":"Lectura de ficheros","text":""},{"location":"languages/python/files_directories/file_read/#leer-todo-el-contenido-del-fichero-como-una-cadena-de-texto","title":"Leer todo el contenido del fichero como una cadena de texto","text":"<pre><code>with open(\"archivo.txt\", \"r\") as archivo:\n    contenido = archivo.read()\n    print(contenido)\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#leer-un-archivo-linea-a-linea","title":"Leer un archivo linea a linea","text":"<pre><code>with open(\"archivo.txt\", \"r\") as archivo:\n    linea = archivo.readline()\n    while linea:\n        print(linea, end=\"\")\n        linea = archivo.readline()\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#obtener-una-lista-con-las-lineas-del-archivo","title":"Obtener una lista con las lineas del archivo","text":"<pre><code>with open(\"archivo.txt\", \"r\") as archivo:\n    lineas = archivo.readlines()\n    for linea in lineas:\n        print(linea, end=\"\")\n</code></pre> <pre><code>with open(\"archivo.txt\", \"r\") as archivo:\n    for linea in archivo:\n        print(linea, end=\"\")\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#lectura-de-archivos-binarios","title":"Lectura de archivos binarios","text":"<pre><code>with open(\"archivo.bin\", \"rb\") as archivo_binario:\n    datos = archivo_binario.read()\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#lectura-de-ficheros-csv","title":"Lectura de ficheros CSV","text":""},{"location":"languages/python/files_directories/file_read/#leer-el-archivo-csv-linea-a-linea","title":"Leer el archivo CSV linea a linea","text":"<pre><code>import csv\n\nwith open(\"datos.csv\", newline=\"\") as archivo_csv:\n    lector_csv = csv.reader(archivo_csv)\n\n    for fila in lector_csv:\n        print(fila)\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#almacenarlo-en-un-diccionario","title":"Almacenarlo en un diccionario","text":"<pre><code>import csv\n\ndatos_diccionario = []\n\nwith open(\"datos.csv\", newline=\"\") as archivo_csv:\n    lector_csv = csv.DictReader(archivo_csv)\n\n    for fila in lector_csv:\n        datos_diccionario.append(fila)\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#almacenarlo-en-una-coleccion-de-objetos","title":"Almacenarlo en una coleccion de objetos","text":"<pre><code>import csv\n\npersonas = []\n\nwith open(\"datos.csv\", newline=\"\") as archivo_csv:\n    lector_csv = csv.reader(archivo_csv)\n\n    for fila in lector_csv:\n        nombre, edad, ciudad = fila\n        persona = Persona(nombre, edad, ciudad)\n        personas.append(persona)\n</code></pre>"},{"location":"languages/python/files_directories/file_read/#pickle","title":"Pickle","text":"<pre><code>import pickle\n\nwith open(\"objetos.pkl\", \"rb\") as archivo:\n    personas_recuperadas = pickle.load(archivo)\n\nfor persona in personas_recuperadas:\n    print(persona.nombre, persona.edad)\n</code></pre>"},{"location":"languages/python/files_directories/file_write/","title":"Escritura de ficheros","text":""},{"location":"languages/python/files_directories/file_write/#escribir-en-un-archivo-de-texto","title":"Escribir en un archivo de texto","text":"<pre><code>with open(\"archivo.txt\", \"w\") as archivo:\n    archivo.write(\"Hola, mundo!\\n\")\n    archivo.write(\"Este es un archivo de texto generado por python.\\n\")\n    archivo.write(\"Adi\u00f3s, mundo!\")\n</code></pre>"},{"location":"languages/python/files_directories/file_write/#agregar-contenido-a-un-archivo-existente","title":"Agregar contenido a un archivo existente","text":"<pre><code>with open(\"archivo.txt\", \"a\") as archivo:\n    archivo.write(\"\\n\u00a1Esto se a\u00f1ade al final del archivo!\")\n</code></pre>"},{"location":"languages/python/files_directories/file_write/#escribir-en-un-archivo-csv","title":"Escribir en un archivo CSV","text":"<pre><code>import csv\n\ndatos = [\n    [\"Nombre\", \"Edad\", \"Ciudad\"],\n    [\"Juan\", 30, \"Ciudad de M\u00e9xico\"],\n    [\"Mar\u00eda\", 25, \"Guadalajara\"],\n    [\"Pedro\", 40, \"Monterrey\"]\n]\n\nwith open(\"datos.csv\", \"w\", newline=\"\") as archivo_csv:\n    escritor_csv = csv.writer(archivo_csv)\n\n    for fila in datos:\n        escritor_csv.writerow(fila)\n</code></pre>"},{"location":"languages/python/files_directories/file_write/#pickle","title":"Pickle","text":"<pre><code>import pickle\n\npersonas = [juan, maria, pedro]\n\nwith open(\"objetos.pkl\", \"wb\") as archivo:\n    pickle.dump(personas, archivo)\n</code></pre>"},{"location":"languages/python/functions/","title":"Funciones","text":"<pre><code>def suma(a, b):\n    \"\"\"Esta funci\u00f3n devuelve la suma de dos n\u00fameros.\"\"\"\n    return a + b\n\nprint(suma(2, 3))\n</code></pre> <pre><code>def saludar(nombre):\n    \"\"\"Esta funci\u00f3n imprime un saludo.\"\"\"\n    print(\"\u00a1Hola,\", nombre, \"!\")\n\nsaludar(\"juan\")\n</code></pre>"},{"location":"languages/python/functions/#desempaquetado-de-argumentos","title":"Desempaquetado de Argumentos","text":"<pre><code>def sumar(*args):\n    total = 0\n    for numero in args:\n        total += numero\n    return total\n\nresultado = sumar(1, 2, 3, 4, 5)\nprint(resultado)  # Output: 15\n</code></pre> <p>Note</p> <p>Puedes pasar un n\u00famero variable de argumentos a una funci\u00f3n utilizando <code>*args</code>. Esto permite que una funci\u00f3n acepte cualquier n\u00famero de argumentos posicionales.</p>"},{"location":"languages/python/functions/#argumentos-de-palabras-clave-arbitrarios","title":"Argumentos de Palabras Clave Arbitrarios","text":"<pre><code>def imprimir_informacion(**kwargs):\n    for clave, valor in kwargs.items():\n        print(clave + \":\", valor)\n\nimprimir_informacion(nombre=\"Juan\", edad=30, ciudad=\"Ciudad de M\u00e9xico\")\n</code></pre> <p>Note</p> <p>De manera similar al desempaquetado de argumentos, puedes pasar un n\u00famero variable de argumentos de palabras clave utilizando <code>**kwargs</code>.</p>"},{"location":"languages/python/functions/#documentacion-de-funciones","title":"Documentaci\u00f3n de funciones","text":"<pre><code>def suma(a, b):\n    \"\"\"Esta funci\u00f3n devuelve la suma de dos n\u00fameros.\n    :param int a: El primer n\u00famero que se suma\n    :param int b: El segundo n\u00famero que se suma\n    :return: La suma de ambos n\u00fameros \n    \"\"\"\n    return a + b\n\nhelp(suma) # Muestra la cadena de documentaci\u00f3n de la funci\u00f3n\n</code></pre>"},{"location":"languages/python/objects/","title":"Objetos","text":""},{"location":"languages/python/objects/#definir-una-clase","title":"Definir una clase","text":"<pre><code>class Persona:\n    def __init__(self, nombre, edad): # Contructor\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        print(f\"Hola, mi nombre es {self.nombre} y tengo {self.edad} a\u00f1os.\")\n</code></pre>"},{"location":"languages/python/objects/#crear-un-objeto","title":"Crear un objeto","text":"<pre><code>juan = Persona(\"Juan\", 30)\n</code></pre>"},{"location":"languages/python/objects/#acceder-a-los-atributos-del-objeto","title":"Acceder a los atributos del objeto:","text":"<pre><code>print(juan.nombre)\n</code></pre>"},{"location":"languages/python/objects/#modificar-los-atributos-de-un-objeto","title":"Modificar los atributos de un objeto","text":"<pre><code>juan.nombre = \"Juan Carlos\"\n</code></pre>"},{"location":"languages/python/objects/#comprobar-si-un-objeto-tiene-un-atributo-especifico","title":"Comprobar si un objeto tiene un atributo especifico","text":"<pre><code>print(hasattr(juan, \"apellidos\")) # Output: False\n</code></pre>"},{"location":"languages/python/objects/#obtener-el-valor-de-un-atributo-si-existe-o-si-no-devolver-un-mensaje-predefinido","title":"Obtener el valor de un atributo si existe o si no devolver un mensaje predefinido","text":"<pre><code>print(getattr(juan, \"apellidos\", \"El objeto 'juan' tiene apellidos definidos\"))\n# Output: El objeto 'juan' no tiene apellidos definido\n</code></pre>"},{"location":"languages/python/objects/#ordenar-objetos","title":"Ordenar objetos","text":"<pre><code>personas_ordenadas = sorted(personas, key=lambda x: x.edad)\n\npersonas.sort(key=lambda x: x.edad)\n</code></pre>"},{"location":"languages/python/variables/array/","title":"Listas o Arrays","text":""},{"location":"languages/python/variables/array/#arrays","title":"Arrays","text":"<pre><code>lista = []\n</code></pre> <pre><code>lista = [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"languages/python/variables/array/#anadir-un-elemento-al-final-de-la-lista","title":"A\u00f1adir un elemento al final de la lista","text":"<pre><code>lista.append(6)\n</code></pre>"},{"location":"languages/python/variables/array/#eliminar-un-elemento-de-la-lista-por-su-indice","title":"Eliminar un elemento de la lista por su indice","text":"<pre><code>del lista[2]\n</code></pre>"},{"location":"languages/python/variables/array/#obtener-la-longitud-de-la-lista","title":"Obtener la longitud de la lista","text":"<pre><code>longitud = len(lista)\n</code></pre>"},{"location":"languages/python/variables/array/#recorrer-una-lista","title":"Recorrer una lista","text":"<pre><code>for elemento in lista:\n    print(elemento)\n</code></pre>"},{"location":"languages/python/variables/array/#saber-si-un-elemento-se-encuentra-en-la-lista","title":"Saber si un elemento se encuentra en la lista","text":"<pre><code>if 3 in lista:\n    print(\"El elemento 3 est\u00e1 en la lista\")\n</code></pre>"},{"location":"languages/python/variables/dictionary/","title":"Diccionarios","text":""},{"location":"languages/python/variables/dictionary/#declarar-un-diccionario","title":"Declarar un diccionario","text":"<pre><code>mi_diccionario = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Madrid\"}\n</code></pre>"},{"location":"languages/python/variables/dictionary/#anadir-elementos-a-un-diccionario","title":"A\u00f1adir elementos a un diccionario","text":"<pre><code>mi_diccionario[\"profesion\"] = \"Programador\"\n</code></pre>"},{"location":"languages/python/variables/dictionary/#eliminar-elementos-de-un-diccionario","title":"Eliminar elementos de un diccionario","text":"<pre><code>del mi_diccionario[\"ciudad\"]\n</code></pre>"},{"location":"languages/python/variables/dictionary/#longitud-de-un-diccionario","title":"Longitud de un diccionario","text":"<pre><code>longitud = len(mi_diccionario)\n</code></pre>"},{"location":"languages/python/variables/dictionary/#iterar-sobre-un-diccionario","title":"Iterar sobre un diccionario","text":"<pre><code># Iterar sobre claves\nfor clave in mi_diccionario:\n    print(clave)\n\n# Iterar sobre valores\nfor valor in mi_diccionario.values():\n    print(valor)\n\n# Iterar sobre pares clave-valor\nfor clave, valor in mi_diccionario.items():\n    print(clave, valor)\n</code></pre>"},{"location":"languages/python/variables/set/","title":"Conjuntos","text":""},{"location":"languages/python/variables/set/#declarar-un-conjunto","title":"Declarar un conjunto","text":"<pre><code>mi_conjunto = {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"languages/python/variables/set/#declarar-un-conjunto-vacio","title":"Declarar un conjunto vacio","text":"<pre><code>conjunto_vacio = set()\n</code></pre>"},{"location":"languages/python/variables/set/#anadir-elementos-a-un-conjunto","title":"A\u00f1adir elementos a un conjunto","text":"<pre><code>mi_conjunto.add(6)\n</code></pre>"},{"location":"languages/python/variables/set/#eliminar-elementos-de-un-conjunto","title":"Eliminar elementos de un conjunto","text":"<pre><code>mi_conjunto.remove(3)\n</code></pre>"},{"location":"languages/python/variables/set/#iteracion-sobre-un-conjunto","title":"Iteracion sobre un conjunto","text":"<pre><code>for elemento in mi_conjunto:\n    print(elemento)\n</code></pre>"},{"location":"languages/python/variables/set/#unir-conjuntos","title":"Unir conjuntos","text":"<pre><code>conjunto1 = {1, 2, 3}\nconjunto2 = {3, 4, 5}\nunion = conjunto1.union(conjunto2)\n</code></pre>"},{"location":"languages/python/variables/set/#interseccion-entre-dos-conjuntos","title":"Interseccion entre dos conjuntos","text":"<pre><code>conjunto1 = {1, 2, 3}\nconjunto2 = {3, 4, 5}\ninterseccion = conjunto1.intersection(conjunto2)  # Output: 3\n</code></pre>"},{"location":"languages/python/variables/set/#diferencia-entre-dos-conjuntos","title":"Diferencia entre dos conjuntos","text":"<pre><code>conjunto1 = {1, 2, 3}\nconjunto2 = {3, 4, 5}\ndiferencia = conjunto1.difference(conjunto2)  # Output: {1, 2}\n</code></pre> <pre><code>conjunto1 = {1, 2, 3}\nconjunto2 = {3, 4, 5}\ndiferencia = conjunto2.difference(conjunto1)  # Output: {4, 5}\n</code></pre> <p>Note</p> <p>Cuando hacemos <code>conjunto1.difference(conjunto2)</code>, obtenemos los elementos que est\u00e1n en conjunto1 pero no en conjunto2. Si hacemos <code>conjunto2.difference(conjunto1)</code> obtenemos los elementos que est\u00e1n en conjunto2 pero no en conjunto1.</p>"},{"location":"languages/python/variables/tuple/","title":"Tuplas o tuples","text":"<p>Son similares a las listas, pero son inmutables, es decir, no se pueden modificar despu\u00e9s de haber sido creadas.</p> <pre><code>tupla = (1, 2, 3, \"cuatro\")\n</code></pre>"},{"location":"languages/python/variables/tuple/#desempaquetado-de-una-tupla","title":"Desempaquetado de una tupla","text":"<pre><code>tupla_empaquetada = 1, 2, 3\na, b, c = tupla_empaquetada\nprint(a, b, c)\n</code></pre>"},{"location":"others/cases/","title":"Cases","text":"<p>Las variables no deben llevar espacios, ya que rompe la sintaxis del lenguaje.  Por ello existe, casi desde el origen de la inform\u00e1tica, t\u00e9cnicas para evitar los espacios con nomenclaturas simples  que han ido evolucionando a lo largo del tiempo.</p> <p>Las m\u00e1s populares son las siguientes.</p> <ul> <li>kebap-case o lisp-case: Las palabras son separadas con guiones y en min\u00fascula. Muy utilizado en lenguajes funcionales y scripts de terminal.</li> <li>camelCase: Las palabras son separadas con may\u00fasculas, salvo la primera letra que debe ir en min\u00fascula. Muy utilizado en lenguajes orientados a objetos.</li> <li>PascalCase Todas las palabras empiezan con una may\u00fascula, incluyendo la primera letra. Tambi\u00e9n es utilizado en lenguajes orientados a objetos, principalmente en la declaraci\u00f3n.</li> <li>snake_case: Las palabras son separadas con barras bajas o underscores. Muy utilizado en Python.</li> </ul> <p>No olvidemos que al final son sencillos acuerdos, est\u00e1ndares a la hora de escribir un lenguaje de programaci\u00f3n.  Por ello evita buscar una favorita, como buen desarrollador debes entender como usarlas y en que lenguaje vas a aplicarlas.</p>"},{"location":"others/docker/","title":"Docker","text":"<p>Docker es una plataforma de virtualizaci\u00f3n a nivel de sistema operativo que permite crear, implementar y ejecutar aplicaciones en contenedores ligeros y port\u00e1tiles. Un contenedor es una instancia de una imagen que incluye el software necesario para que una aplicaci\u00f3n se ejecute de manera consistente en cualquier entorno.</p>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#comandos-basicos-de-docker","title":"Comandos b\u00e1sicos de Docker","text":"Comando Descripci\u00f3n <code>docker --version</code> Muestra la versi\u00f3n de Docker instalada <code>docker info</code> Muestra informaci\u00f3n sobre la instalaci\u00f3n de Docker <code>docker pull &lt;imagen&gt;</code> Descarga una imagen de Docker Hub <code>docker images</code> Lista todas las im\u00e1genes locales <code>docker ps</code> Lista los contenedores en ejecuci\u00f3n <code>docker ps -a</code> Lista todos los contenedores (activos e inactivos) <code>docker start &lt;id&gt;</code> Inicia un contenedor parado <code>docker stop &lt;id&gt;</code> Detiene un contenedor en ejecuci\u00f3n <code>docker rm &lt;id&gt;</code> Elimina un contenedor <code>docker rmi &lt;imagen&gt;</code> Elimina una imagen","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#trabajar-con-imagenes","title":"Trabajar con Im\u00e1genes","text":"<p>Las im\u00e1genes son plantillas que definen el contenido de un contenedor. Docker Hub es el registro oficial donde puedes encontrar y descargar im\u00e1genes.</p>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#buscar-y-descargar-una-imagen","title":"Buscar y descargar una imagen","text":"<p>Para buscar una imagen en Docker Hub:</p> <pre><code>docker search &lt;nombre_imagen&gt;\n</code></pre> <p>Para descargar una imagen:</p> <pre><code>docker pull &lt;nombre_imagen&gt;\n</code></pre> <p>Para listar todas las im\u00e1genes descargadas:</p> <pre><code>docker images\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#contenedores-en-docker","title":"Contenedores en docker","text":"<p>Los contenedores son instancias de im\u00e1genes en ejecuci\u00f3n que crean un entorno aislado.</p>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#crear-y-ejecutar-un-contenedor","title":"Crear y ejecutar un contenedor","text":"<p>Para ejecutar un contenedor de forma interactiva:</p> <pre><code>docker run -it &lt;nombre_imagen&gt; /bin/bash\n</code></pre> <p>Para ejecutar un contenedor en segundo plano:</p> <pre><code>docker -run -d --name &lt;nombre_contenedor&gt; &lt;nombre_imagen&gt;\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#inspeccionar-un-contenedor","title":"Inspeccionar un Contenedor","text":"<p>Para ver detalles de un contenedor:</p> <pre><code>docker inspect &lt;id_contenedor&gt;\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#eliminar-contenedores","title":"Eliminar contenedores","text":"<p>Para detener un contenedor en ejecuci\u00f3n:</p> <pre><code>docker stop &lt;id_contenedor&gt;\n</code></pre> <p>Para eliminar un contenedor detenido:</p> <pre><code>docker rm &lt;id_contenedor&gt;\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#dockerfile-y-construccion-de-imagenes-personalizadas","title":"Dockerfile y Construcci\u00f3n de Im\u00e1genes Personalizadas","text":"<p>Un Dockerfile es un archivo de texto que contiene las instrucciones para crear una imagen personalizada.</p>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#crear-un-dockerfile","title":"Crear un Dockerfile","text":"<p>Ejemplo de Dockerfile para una aplicaci\u00f3n de Node.js:</p> <pre><code># Especificar la imagen base\nFROM node:14\n\n# Crear y establecer el directorio de trabajo\nWORKDIR /app\n\n# Copiar los archivos al contenedor\nCOPY . .\n\n# Instalar dependencias\nRUN npm install\n\n# Exponer el puerto\nEXPOSE 3000\n\n# Comando para ejecutar la aplicaci\u00f3n\nCMD [\"node\", \"app.js\"]\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#construir-una-imagen-desde-un-dockerfile","title":"Construir una Imagen desde un Dockerfile","text":"<p>Para construir una imagen desde un <code>Dockerfile</code>:</p> <pre><code>docker build -t &lt;nombre_imagen&gt; .\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#ejecutar-una-imagen-creada","title":"Ejecutar una imagen creada","text":"<pre><code>docker run -d -p 3000:3000 mi_app_node\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose permite definir y ejecutar aplicaciones multicontenedor en Docker usando un archivo <code>docker-compose.yml</code>.</p>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#ejemplo-de-archivo-docker-composeyml","title":"Ejemplo de Archivo docker-compose.yml","text":"<p>Ejemplo de un <code>docker-compose.yml</code> para una aplicaci\u00f3n web con una base de datos MySQL:</p> <pre><code>version: '3'\nservices:\n  web:\n    image: my_web_app\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"80:80\"\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: my_database\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/docker/#comandos-basicos-de-docker-compose","title":"Comandos b\u00e1sicos de Docker Compose","text":"Comando Descripci\u00f3n <code>docker-compose up</code> Crea y levanta los contenedores especificados <code>docker-compose down</code> Detiene y elimina los contenedores <code>docker-compose ps</code> {Lista los contenedores manejados por Compose <p>Para levantar todos los servicios definidos en <code>docker-compose.yml</code>:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Para detener todos los servicios:</p> <pre><code>docker-compose down\n</code></pre>","tags":["In development","Pending review","11/11/2024"]},{"location":"others/json/","title":"JSON (JavaScript Object Notation)","text":"<p>JSON es un formato de texto ligero para el intercambio de datos. Es f\u00e1cil de leer y escribir para los seres humanos y f\u00e1cil de analizar y generar para las m\u00e1quinas. JSON se utiliza com\u00fanmente para transmitir datos en aplicaciones web (por ejemplo, entre un servidor y un cliente).</p>","tags":["Finished","26/08/2024"]},{"location":"others/json/#estructura-basica-de-json","title":"Estructura B\u00e1sica de JSON","text":"<p>JSON se compone de dos estructuras principales:</p> <p>Objetos: Una colecci\u00f3n desordenada de pares clave/valor. Las claves son cadenas (strings) y los valores pueden ser de    varios tipos (n\u00famero, cadena, objeto, array, booleano o null).</p> <p><pre><code>{\n  \"nombre\": \"Juan\",\n  \"edad\": 30,\n  \"casado\": true,\n  \"hijos\": [\"Ana\", \"Pablo\"],\n  \"direccion\": {\n    \"calle\": \"Calle Falsa 123\",\n    \"ciudad\": \"Madrid\"\n  }\n}\n</code></pre> Arrays: Una lista ordenada de valores, que pueden ser de cualquier tipo (n\u00famero, cadena, objeto, array, booleano o    null).</p> <pre><code>[\n  \"manzana\",\n  \"pl\u00e1tano\",\n  \"naranja\"\n]\n</code></pre>","tags":["Finished","26/08/2024"]},{"location":"others/json/#tipos-de-datos-en-json","title":"Tipos de Datos en JSON","text":"<p>JSON admite los siguientes tipos de datos:</p> <ul> <li>N\u00famero: Puede ser un n\u00famero entero o decimal (de punto flotante).</li> <li>Cadena (String): Se escribe entre comillas dobles.</li> <li>Booleano: Puede ser true o false.</li> <li>Nulo: Representado por null.</li> <li>Objeto: Una colecci\u00f3n de pares clave/valor, delimitada por llaves {}.</li> <li>Array: Una lista ordenada de valores, delimitada por corchetes [].</li> </ul>","tags":["Finished","26/08/2024"]},{"location":"others/json/#reglas-sintacticas-de-json","title":"Reglas Sint\u00e1cticas de JSON","text":"<ol> <li>Las claves de los objetos deben ser cadenas: Deben estar entre comillas dobles.</li> <li>Los valores pueden ser de varios tipos: Como n\u00fameros, cadenas, objetos, arrays, booleanos o null.</li> <li>Las comas separan los pares clave/valor en un objeto y los elementos en un array.</li> <li>Los objetos y arrays pueden anidarse: Esto significa que un valor en un objeto puede ser otro objeto o un array, y viceversa.</li> </ol>","tags":["Finished","26/08/2024"]},{"location":"others/json/#ejemplo-de-json","title":"Ejemplo de JSON","text":"<pre><code>{\n  \"nombre\": \"Mar\u00eda\",\n  \"edad\": 25,\n  \"esEstudiante\": false,\n  \"cursos\": [\"Matem\u00e1ticas\", \"F\u00edsica\", \"Qu\u00edmica\"],\n  \"direccion\": {\n    \"calle\": \"Avenida Siempreviva\",\n    \"numero\": 742,\n    \"ciudad\": \"Springfield\"\n  },\n  \"amigos\": [\n    {\n      \"nombre\": \"Luisa\",\n      \"edad\": 24\n    },\n    {\n      \"nombre\": \"Pedro\",\n      \"edad\": 27\n    }\n  ]\n}\n</code></pre>","tags":["Finished","26/08/2024"]},{"location":"others/json/#ventajas-de-json","title":"Ventajas de JSON","text":"<ul> <li>Ligero: JSON es menos pesado en comparaci\u00f3n con otros formatos de intercambio de datos como XML.</li> <li>F\u00e1cil de leer y escribir: Tanto para humanos como para m\u00e1quinas.</li> <li>Compatibilidad: Es compatible con muchos lenguajes de programaci\u00f3n y se utiliza ampliamente en APIs web.</li> </ul>","tags":["Finished","26/08/2024"]},{"location":"others/json/#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>JSON.org: Sitio web oficial con una explicaci\u00f3n detallada de JSON, sus especificaciones y ejemplos.</li> <li>JSONLint: Una herramienta en l\u00ednea para validar y formatear JSON.</li> <li>JsonFormater: Una herramienta en l\u00ednea para validar y formatear JSON.</li> </ul>","tags":["Finished","26/08/2024"]},{"location":"others/markdown/","title":"Markdown","text":"<p>Markdown es un lenguaje de marcado ligero que se utiliza para formatear texto. Es f\u00e1cil de leer y escribir, y se convierte en HTML de manera sencilla.</p>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#encabezados","title":"Encabezados","text":"<p>Puedes crear encabezados utilizando el s\u00edmbolo <code>#</code>. El n\u00famero de <code>#</code> indica el nivel del encabezado.</p> <pre><code># Encabezado 1\n\n## Encabezado 2\n\n### Encabezado 3\n\n#### Encabezado 4\n\n##### Encabezado 5\n\n###### Encabezado 6\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#enfasis","title":"\u00c9nfasis","text":"<p>Puedes agregar \u00e9nfasis al texto utilizando asteriscos * o guiones bajos _.</p> <ul> <li>Negrita: Envuelve el texto con 2 asteriscos o 2 guiones bajos. <code>**negrita**</code></li> <li>Cursiva: Envuelve el texto con 1 asterisco o un 1 gui\u00f3n bajo. <code>*cursiva*</code></li> <li>Negrita y Cursiva: Usa 3 asteriscos o 3 guiones bajos. <code>***negrita y cursiva***</code></li> </ul>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#listas","title":"Listas","text":"<p>Puedes anidar listas utilizando espacios o tabulaciones antes del marcador de la lista.</p>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#listas-ordenadas","title":"Listas ordenadas","text":"<p>Utiliza n\u00fameros seguidos de un punto para crear listas ordenadas.</p> <pre><code>1. Primer \u00edtem\n2. Segundo \u00edtem\n3. Tercer \u00edtem\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#listas-desordenadas","title":"Listas desordenadas","text":"<p>Utiliza asteriscos *, signos m\u00e1s + o guiones - para listas desordenadas.</p> <pre><code>- Primer \u00edtem\n- Segundo \u00edtem\n- Tercer \u00edtem\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#enlaces","title":"Enlaces","text":"<p>Puedes crear enlaces utilizando corchetes [] para el texto del enlace y par\u00e9ntesis () para la URL.</p> <pre><code>[Texto del enlace](https://www.ejemplo.com)\n</code></pre> <p>Tambien se pueden crear atajos a los enlaces:</p> <pre><code>[Nombre del enlace][Referencia al enlace]\n\n[Referencia al enlace]: https://www.ejemplo.com\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#citas","title":"Citas","text":"<p>Para crear citas, utiliza el s\u00edmbolo &gt;.</p> <pre><code>&gt; Esta es una cita.\n</code></pre> <p>Tambi\u00e9n existen citas especiales que se embellecen en github</p> <pre><code>&gt; [!NOTE]\n&gt; Esta es una cita.\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#tablas","title":"Tablas","text":"<p>Puedes crear tablas utilizando guiones - para la l\u00ednea de encabezado y barras verticales | para separar columnas.</p> <pre><code>| Encabezado 1  | Encabezado 2  |\n| ------------- | ------------- |\n| Fila 1, Col 1 | Fila 1, Col 2 |\n| Fila 2, Col 1 | Fila 2, Col 2 |\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#codigo","title":"C\u00f3digo","text":"","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#codigo-en-linea","title":"C\u00f3digo en L\u00ednea","text":"<p>Para c\u00f3digo en l\u00ednea, usa comillas simples invertidas `.</p> <pre><code>Este es un ejemplo de `c\u00f3digo en l\u00ednea`.\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#bloques-de-codigo","title":"Bloques de C\u00f3digo","text":"<p>Para bloques de c\u00f3digo, utiliza tres comillas simples invertidas ``` antes y despu\u00e9s del c\u00f3digo. Puedes especificar el lenguaje de programaci\u00f3n para resaltado de sintaxis.</p> <pre><code>```java\nSystem.out.println(\"Hola mund0\");\n```\n</code></pre> <p>Para mostrar un bloque de c\u00f3digo de markdown dentro de un bloque de c\u00f3digo simplemnete se usan mas comillas simples invertidas en el bloque de c\u00f3digo externo.</p>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#lenguajes","title":"Lenguajes","text":"<p>En la siguiente tabla se muestra una lista de lenguajes de prograci\u00f3n admitidos por Linguistic, el sistema de resaltado de c\u00f3digo de GitHub:</p> Lenguaje Alias Lenguaje Alias Lenguaje Alias Bash / Shell <code>bash</code>, <code>sh</code>, <code>shell</code> Java <code>java</code> Python <code>python</code>, <code>py</code> C <code>c</code> JavaScript <code>javascript</code>, <code>js</code> Ruby <code>ruby</code>, <code>rb</code> C++ <code>cpp</code>, <code>c++</code> JSON <code>json</code> Rust <code>rust</code> C# <code>csharp</code>, <code>cs</code> Kotlin <code>kotlin</code> SQL <code>sql</code> CSS <code>css</code> Markdown <code>markdown</code>, <code>md</code> Swift <code>swift</code> Diff <code>diff</code> Objective-C <code>objective-c</code>, <code>objc</code> TypeScript <code>typescript</code>, <code>ts</code> Go <code>go</code> Perl <code>perl</code>, <code>pl</code> XML <code>xml</code> HTML <code>html</code> PHP <code>php</code> YAML <code>yaml</code>, <code>yml</code>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#lineas-horizontales","title":"L\u00edneas horizontales","text":"<p>Para agregar una l\u00ednea horizontal, utiliza tres o m\u00e1s guiones, asteriscos, o guiones bajos.</p> <pre><code>---\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/markdown/#escapando-caracteres","title":"Escapando caracteres","text":"<p>Si necesitas usar un car\u00e1cter especial literalmente, esc\u00e1palo con una barra invertida .</p> <pre><code>\\*Este texto no estar\u00e1 en cursiva\\*\n</code></pre>","tags":["Finished","24/08/2024"]},{"location":"others/node/","title":"Node.js","text":"","tags":["Pending review","24/08/2024"]},{"location":"others/node/#que-es-nodejs","title":"\u00bfQu\u00e9 es Node.js?","text":"<p>Node.js es un entorno de ejecuci\u00f3n para JavaScript que se construy\u00f3 sobre el motor JavaScript V8 de Chrome. Permite a los desarrolladores ejecutar c\u00f3digo JavaScript en el servidor, fuera del navegador, para construir aplicaciones backend escalables.</p>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#caracteristicas-principales-de-nodejs","title":"Caracter\u00edsticas principales de Node.js:","text":"<ul> <li>As\u00edncrono y orientado a eventos: Node.js utiliza un modelo de entrada/salida no bloqueante, lo que lo hace eficiente y   adecuado para aplicaciones en tiempo real.</li> <li>Motor V8: Utiliza el motor V8 de Google Chrome para ejecutar c\u00f3digo JavaScript r\u00e1pidamente.</li> <li>Ecosistema de npm: Node.js viene con npm, un gestor de paquetes que ofrece una gran cantidad de m\u00f3dulos para agilizar   el desarrollo.</li> </ul>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#instalacion-de-nodejs","title":"Instalaci\u00f3n de node.js","text":"<p>Es recomendable el uso de nvm para el control de versiones, por lo que lo instalaremos en lugar del node.js. Si tenemos node.js instalado, lo mejor es desinstalarlo.</p> <p>Verifica la instalaci\u00f3n de nvm con el comando:</p> <pre><code>nvm version\n</code></pre> <p>Una vez instalado nvm instalamos la \u00faltima versi\u00f3n o la que necesitemos para el proyecto en el que vamos a trabajar.</p> <p>Podemos obtener una lista de las versiones disponibles usando el comando:</p> <pre><code>nvm ls available\n</code></pre> <p>Para instalar la versi\u00f3n de node utilizaremos el siguiente comando sustituyendo el n\u00famero por la versi\u00f3n que nosotros deseemos:</p> <pre><code>nvm install 20.0.0\n</code></pre> <p>Para obtener una lista de las versiones disponibles instaladas previamente podemos utilizar el comando:</p> <pre><code>nvm ls\n</code></pre> <p>Para indicar que versi\u00f3n queremos utilizar usaremos el siguiente comando sustituyendo el n\u00famero por la versi\u00f3n que nosotros deseemos usar de la lista de versiones disponibles ya instaladas previamente:</p> <pre><code>nvm use 20.0.0\n</code></pre> <p>Verifica que funciona con el comando:</p> <pre><code>npm -v\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#ejecutar-un-script","title":"Ejecutar un script","text":"<pre><code>node app.js\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#inicializar-un-proyecto","title":"Inicializar un proyecto","text":"<pre><code>npm init\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#instalar-un-paquete","title":"Instalar un paquete","text":"<pre><code>npm install &lt;nombre_paquete&gt;\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#instalar-un-paquete-de-manera-global","title":"Instalar un paquete de manera global","text":"<pre><code>npm install -g &lt;nombre_paquete&gt;\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#desinstalar-un-paquete","title":"Desinstalar un paquete","text":"<pre><code>npm uninstall &lt;nombre_paquete&gt;\n</code></pre>","tags":["Pending review","24/08/2024"]},{"location":"others/node/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n de npm</li> <li>Documentaci\u00f3n Oficial de Node.js</li> </ul>","tags":["Pending review","24/08/2024"]},{"location":"others/xml/","title":"XML(Extensive Markup Language)","text":"<p>XML (Extensible Markup Language) es un lenguaje de marcado dise\u00f1ado para almacenar y transportar datos. A diferencia de HTML, que tiene un conjunto fijo de etiquetas, XML permite a los desarrolladores definir sus propias etiquetas y estructuras de datos.</p>","tags":["Finished","26/08/2024"]},{"location":"others/xml/#estructura","title":"Estructura","text":"<p>Un documento XML tiene una estructura jer\u00e1rquica basada en etiquetas. Cada etiqueta tiene un nombre y puede contener texto, otros elementos, o atributos.</p> <ul> <li>Declaraci\u00f3n XML: La primera l\u00ednea es la declaraci\u00f3n XML que define la versi\u00f3n de XML y la codificaci\u00f3n de caracteres   del documento.</li> <li>Elementos o Etiquetas: Un elemento puede contener otros elementos (hijos) o texto.</li> <li>Atributos: Los atributos proporcionan informaci\u00f3n adicional sobre los elementos y est\u00e1n definidos dentro de la   etiqueta de apertura.</li> </ul>","tags":["Finished","26/08/2024"]},{"location":"others/xml/#notas-importantes-sobre-xml","title":"Notas Importantes sobre XML","text":"<ul> <li>Bien Formado vs. V\u00e1lido: Un documento XML bien formado sigue las reglas sint\u00e1cticas de XML (por ejemplo, todas las etiquetas de apertura deben tener una etiqueta de cierre). Un documento XML v\u00e1lido es un documento bien formado que tambi\u00e9n cumple con las reglas definidas por un DTD (Document Type Definition) o un esquema XML.</li> <li>Sensibilidad a May\u00fasculas: XML es sensible a may\u00fasculas y min\u00fasculas, por lo que  y  se consideran elementos diferentes. <li>Uso de Espacios en Blanco: XML preserva los espacios en blanco, lo cual es \u00fatil cuando se desea mantener el formato del texto.</li> <li>Escapado de Caracteres Especiales: Algunos caracteres como &lt;, &gt;, y &amp; tienen que ser escapados usando &lt;, &gt;, y &amp; respectivamente para evitar conflictos con la sintaxis de XML.</li>","tags":["Finished","26/08/2024"]},{"location":"others/xml/#ejemplo-de-xml","title":"Ejemplo de XML","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;biblioteca&gt;\n  &lt;libro genero=\"tecnolog\u00eda\"&gt;\n    &lt;titulo&gt;Introducci\u00f3n a XML&lt;/titulo&gt;\n    &lt;autor&gt;Juan P\u00e9rez&lt;/autor&gt;\n    &lt;detalles&gt;\n      &lt;editorial&gt;Editorial ABC&lt;/editorial&gt;\n      &lt;publicado&gt;2024&lt;/publicado&gt;\n    &lt;/detalles&gt;\n  &lt;/libro&gt;\n  &lt;libro genero=\"ciencia\"&gt;\n    &lt;titulo&gt;El Universo&lt;/titulo&gt;\n    &lt;autor&gt;Mar\u00eda L\u00f3pez&lt;/autor&gt;\n    &lt;detalles&gt;\n      &lt;editorial&gt;Editorial XYZ&lt;/editorial&gt;\n      &lt;publicado&gt;2022&lt;/publicado&gt;\n    &lt;/detalles&gt;\n  &lt;/libro&gt;\n&lt;/biblioteca&gt;\n</code></pre>","tags":["Finished","26/08/2024"]},{"location":"others/yaml/","title":"YAML (YAML Ain't Markup Language)","text":"<p>YAML es un formato de serializaci\u00f3n de datos muy legible y f\u00e1cil de escribir, especialmente \u00fatil para archivos de configuraci\u00f3n. La indentaci\u00f3n es crucial en YAML, ya que define la estructura jer\u00e1rquica de los datos. Aseg\u00farate de usar siempre espacios y no tabulaciones para evitar errores de sintaxis.</p>","tags":["Finished","26/08/2024"]},{"location":"others/yaml/#estructura","title":"Estructura","text":"<ul> <li>Comentarios: comienzan con <code>#</code></li> <li>Objetos (mapas): utilizan el formato <code>clave: valor</code></li> <li>Anidaci\u00f3n: a indentaci\u00f3n (espacios) define la jerarqu\u00eda y la anidaci\u00f3n de los datos.</li> <li>Listas (Arrays): Se indican con guiones (-) y se pueden anidar dentro de otros objetos.</li> <li>Valores en lista sin clave-valor: Las listas tambi\u00e9n pueden contener valores simples sin formato de clave-valor.</li> </ul>","tags":["Finished","26/08/2024"]},{"location":"others/yaml/#ejemplo-de-yaml","title":"Ejemplo de YAML","text":"<pre><code># Informaci\u00f3n b\u00e1sica de una persona\npersona:\n  nombre: Juan P\u00e9rez\n  edad: 30\n  direccion:\n    calle: \"123 Calle Principal\"\n    ciudad: \"Ciudad Ejemplo\"\n    pais: \"Pa\u00eds de Ejemplo\"\n  telefonos:\n    - tipo: \"casa\"\n      numero: \"123-456-7890\"\n    - tipo: \"trabajo\"\n      numero: \"098-765-4321\"\n  habilidades:\n    - programaci\u00f3n\n    - escritura\n    - cocina\n</code></pre>","tags":["Finished","26/08/2024"]}]}